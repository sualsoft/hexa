{"/_index.fa/":{"data":{"":" آزاد، متن‌باز ساخت وب‌سایت‌های مدرن با مارک‌داون و هیوگو تم هیوگو سریع و دارای امکانات کامل برای ایجاد وب‌سایت‌های استاتیک زیبا شروع کنید سریع و با امکانات کامل ساده و آسان برای استفاده، در عین حال قدرتمند و غنی از ویژگی‌ها متنوع.\nمارک‌داون تنها چیزی است که شما نیاز دارید فقط با مارک‌داون بنویسید. تکمیل و کامل با کامپوننت‌های کد کوتاه.\nجستجوی کامل متن جستجوی متن کامل داخلی با FlexSearch، بدون نیاز به نصب موارد اضافی.\nسبک مانند یک پر برای استفاده از هگزترا به هیچ وابستگی یا Node.js نیاز نیست. با پشتیبانی از هیوگو، یکی از سریع‌ترین تولیدکنندگان سایت استاتیک، سایت شما را تنها در چند ثانیه با یک باینری می‌سازد.\nواکنش‌گرا با حالت تیره در اندازه‌های مختلف صفحه نمایش عالی به نظر می‌رسد. پشتیبانی از حالت تیره داخلی، با تغییر خودکار براساس اولویت سیستم کاربر.\nساخت و میزبانی رایگان با گیت‌هاب Actions بسازید و به صورت رایگان در گیت‌هاب Pages میزبانی کنید. یا می‌توانید آن را در هر سرویس میزبانی استاتیک میزبانی کنید.\nچند زبانه آسان فقط با افزودن پسوند محلی به پرونده مارک‌داون صفحات وب‌سایت چند زبانه ایجاد کنید. افزودن پشتیبانی i18n به سایت شما بصری است.\nو خیلی بیشتر... برجسته‌کردن سینتکس / فهرست مطالب / سئو / RSS / LaTeX / Mermaid / سفارشی‌سازی / و موارد دیگر…"},"title":"تم هگزترا"},"/_index.ja/":{"data":{"":" 無料、オープンソース MarkdownとHugoで モダンなウェブサイトを構築 美しい静的ウェブサイトを作るための 高速でバッテリー同梱型のHugoテーマ 始める 高速かつ多機能 シンプルで使いやすく、それでいて強力で豊富な機能を備えています。\nMarkdownだけでOK Markdownだけで作成可能。ショートコードコンポーネントで充実させることもできます。\n全文検索 FlexSearchによる全文検索が内蔵されており、追加の設定は不要です。\n羽のように軽量 Hextraを使用するために依存関係やNode.jsは必要ありません。Hugoによって動力を得ており、単一のバイナリで数秒でサイトを構築できます。\nレスポンシブ対応とダークモード さまざまな画面サイズで美しく見えます。内蔵のダークモードサポートにより、ユーザーのシステム設定に基づいて自動切り替えが可能です。\n無料で構築とホスティング GitHub Actionsを使って構築し、GitHub Pagesで無料でホスティングできます。また、他の静的ホスティングサービスでもホスティング可能です。\n簡単な多言語対応 Markdownファイルにロケールサフィックスを追加するだけで多言語ページを作成できます。i18nサポートの追加も直感的です。\nさらに多くの機能 構文ハイライト / 目次 / SEO / RSS / LaTeX / Mermaid / カスタマイズ可能 / など多数…"},"title":"Hextra テーマ"},"/_index.zh-cn/":{"data":{"":" 免费 开源 创建现代化网站 由 Markdown 和 Hugo 驱动 极速且全能的 Hugo 主题框架 为构建现代化的静态网站而生 现在开始 快速且功能全面 简单易用，功能强大丰富。\nMarkdown 写作 只需使用 Markdown 进行编辑。多样的 Shortcode 组件开箱即用。\n全文搜索 内置 FlexSearch 全文搜索，无需额外设置。\n轻如羽毛 使用 Hextra 无需依赖 Node.js。由 Hugo 提供支持，Hugo 是最快的静态网站生成器之一，只需一个二进制文件即可在数秒内创建网站。\n响应式布局，暗黑模式 适应不同的屏幕尺寸。内置暗黑模式支持，并根据用户的系统偏好自动切换。\n免费构建和托管 使用 GitHub Actions 进行构建，并在 GitHub Pages 上免费托管。也可以托管在任何静态托管服务上。\n多语言轻松实现 仅需通过在 Markdown 文件后添加语言代码即可创建多语言页面。向您的站点添加 i18n 支持直观易行。\n还有更多... 代码高亮 / 目录 / SEO / RSS / LaTeX 公式 / Mermaid 图标 / 自定义 / 等等…"},"title":"Hextra 主题"},"/about/":{"data":{"":"Hextra is designed to be a simple, fast, and flexible theme for building modern static websites. It is especially well-suited for documentation websites but can also be used for various types of sites, such as blogs, portfolios, and more.\nHugo, like Jekyll, is a static site generator. What sets Hugo apart is that it is a single binary, making it easy to install and run on various platforms. It is also extremely fast and reliable, capable of rendering a site with thousands of pages in milliseconds.\nHextra is built with a mindset focused on having a minimal footprint. To get started, no extra dependencies like Node.js packages are required; all you need is a single YAML configuration file, along with your Markdown content. Thus, we can focus on writing quality content instead of setting up tooling.","credits#Credits":"Hextra cannot be built without the following tools and inspirations:\nHugo Tailwind CSS Heroicons Nextra Next.js "},"title":"About"},"/blog/":{"data":{"":" RSS Feed "},"title":"Blog"},"/blog/_index.fa/":{"data":{"":" خوراک RSS "},"title":"وبلاگ"},"/blog/_index.zh-cn/":{"data":{"":" RSS 订阅 "},"title":"博客"},"/docs/":{"data":{"":"👋 Hello! Welcome to the Hextra documentation!","features#Features":" Beautiful Design - Inspired by Nextra, Hextra utilizes Tailwind CSS to offer a modern design that makes your site look outstanding. Responsive Layout and Dark Mode - It looks great on all devices, from mobile, tablet to desktop. Dark mode is also supported to accommodate various lighting conditions. Fast and Lightweight - Powered by Hugo, a lightning-fast static-site generator housed in a single binary file, Hextra keeps its footprint minimal. No JavaScript or Node.js are needed to use it. Full-text Search - Built-in offline full-text search powered by FlexSearch, no additional configuration required. Battery-included - Markdown, syntax highlighting, LaTeX math formulae, diagrams and Shortcodes elements to enhance your content. Table of contents, breadcrumbs, pagination, sidebar navigation and more are all automatically generated. Multi-language and SEO Ready - Multi-language sites made easy with Hugo’s multilingual mode. Out-of-the-box support is included for SEO tags, Open Graph, and Twitter Cards. ","next#Next":"Dive right into the following section to get started:\nGetting StartedLearn how to create website using Hextra ","questions-or-feedback#Questions or Feedback?":" ❓ Hextra is still in active development. Have a question or feedback? Feel free to open an issue! ","what-is-hextra#What is Hextra?":"Hextra is a modern, fast and batteries-included [Hugo][hugo] theme built with [Tailwind CSS][tailwind-css].\nDesigned for building beautiful websites for documentation, blogs, and websites, it provides out-of-the-box features and flexibility to meet various requirements."},"title":"Documentation"},"/docs/_index.fa/":{"data":{"":"👋 سلام! به مستندات هگزترا خوش آمدید!","بعدی#بعدی":"برای شروع کردن به بخش زیر مراجعه کنید:\nشروع کنیدیادگیری نحوه ایجاد وب‌سایت با استفاده از هگزترا ","سوال-یا-بازخورد#سوال یا بازخورد؟":" ❓ هگزترا هنوز در حال توسعه است. سوال یا بازخوردی دارید؟ با خیال راحت یک موضوع را باز کنید! ","هگزترا-چیه#هگزترا چیه؟":"هگزترا یک تم [Hugo][hugo] مدرن و سریع است که با [Tailwind CSS][tailwind-css] ساخته شده است.\nطراحی شده برای ساخت وب‌سایت‌های زیبا برای مستندات، وبلاگ‌ها و وب‌سایت‌ها، ویژگی‌های خارج از جعبه و انعطاف‌پذیری را برای پاسخگویی نیازهای مختلف فراهم می‌کند.","ویژگیها#ویژگی‌ها":" طراحی زیبا - با الهام از Nextra، هگزترا از Tailwind CSS برای ارائه یک طراحی مدرن که سایت شما را برجسته می‌کند، استفاده می‌کند. طراحی واکنش‌گرا و حالت تیره - در تمام دستگاه‌ها، از تلفن همراه، تبلت تا دسکتاپ، عالی به نظر می‌رسد. حالت تیره نیز برای انطباق با شرایط مختلف روشنایی پشتیبانی می‌شود. سریع و سبک - طراحی شده توسط Hugo، یک ایجادکننده سایت استاتیک سریع مثل رعد و برق که در یک فایل باینری قرار گرفته است، هگزترا ردپای خود را به حداقل می‌رساند. برای استفاده از آن به جاوااسکریپت یا Node.js نیازی ندارید. جستجوی متن کامل - جستجوی متن کاملا آفلاین داخلی طراحی شده توسط FlexSearch، بدون نیاز به پیکربندی اضافی. امکانات کامل - برای بهتر کردن محتوای شما مارک‌داون، برجسته‌کردن سینتکس، فرمول‌های ریاضی LaTeX، نمودارها و عناصر Shortcodeها را شامل میشه. فهرست مطالب، بردکرامب، صفحه‌بندی، پیمایش نوار کناری و موارد دیگر همه به صورت خودکار تولید می‌شوند. چند زبانه و سئو آماده - سایت‌های چند زبانه با حالت چند زبانه Hugo راحت ساخته می‌شوند. پشتیبانی خارج از جعبه برای برچسب‌های سئو، Open Graph و کارت‌های توییتر گنجانده شده است. "},"title":"مستندات"},"/docs/_index.ja/":{"data":{"":"👋 こんにちは！Hextraのドキュメンテーションへようこそ！","hextraとは#Hextraとは？":"Hextraは、[Tailwind CSS][tailwind-css]を使用して構築された、モダンで高速かつ機能豊富な[Hugo][hugo]テーマです。ドキュメンテーション、ブログ、ウェブサイトのための美しいウェブサイトを構築するために設計されており、さまざまな要件に対応するための機能と柔軟性を提供します。","次に#次に":"以下のセクションに進んで、すぐに始めましょう：\nはじめにHextraを使用してウェブサイトを作成する方法を学ぶ ","特徴#特徴":" 美しいデザイン - Nextraにインスパイアされ、Tailwind CSSを活用してモダンなデザインを提供し、サイトを際立たせます。 レスポンシブレイアウトとダークモード - モバイル、タブレット、デスクトップなど、すべてのデバイスで美しく表示されます。また、ダークモードもサポートされており、さまざまな照明条件に対応します。 高速で軽量 - 単一のバイナリファイルに収められた超高速の静的サイトジェネレータであるHugoを採用し、Hextraはそのフットプリントを最小限に抑えています。JavaScriptやNode.jsは必要ありません。 全文検索 - FlexSearchを利用したオフライン全文検索が組み込まれており、追加の設定は不要です。 機能豊富 - Markdown、シンタックスハイライト、LaTeX数式、ダイアグラム、ショートコード要素など、コンテンツを強化するための機能を提供します。目次、パンくずリスト、ページネーション、サイドバーナビゲーションなどが自動生成されます。 多言語対応とSEO対応 - Hugoの多言語モードを使用して、多言語サイトを簡単に作成できます。SEOタグ、Open Graph、Twitter Cardsのサポートも標準で提供されます。 ","質問やフィードバックは#質問やフィードバックは？":" ❓ Hextraはまだ活発に開発中です。 質問やフィードバックがありますか？issueを開いてお気軽にお知らせください！ "},"title":"ドキュメンテーション"},"/docs/_index.zh-cn/":{"data":{"":"👋 你好！欢迎来到 Hextra 文档！","下一步#下一步":"立即深入以下部分，开始使用：\n入门指南学习如何使用 Hextra 创建网站 ","什么是-hextra#什么是 Hextra？":"Hextra 是一个现代、快速且功能齐全的 [Hugo][hugo] 主题，基于 [Tailwind CSS][tailwind-css] 构建。专为构建美观的文档、博客和网站而设计，它提供了开箱即用的功能和灵活性，以满足各种需求。","有问题或反馈#有问题或反馈？":" ❓ Hextra 仍在积极开发中。 有问题或反馈？欢迎提交问题！ ","特性#特性":" 精美设计 - 灵感源自 Nextra，Hextra 利用 Tailwind CSS 提供现代设计，使您的网站脱颖而出。 响应式布局与暗黑模式 - 在所有设备上都能完美呈现，从手机、平板到桌面。暗黑模式也得到支持，以适应不同的光照条件。 快速且轻量 - 由 Hugo 驱动，这是一个闪电般快速的静态网站生成器，仅需一个二进制文件，Hextra 保持其占用空间最小。无需 JavaScript 或 Node.js 即可使用。 全文搜索 - 内置离线全文搜索，由 FlexSearch 提供支持，无需额外配置。 功能齐全 - Markdown、语法高亮、LaTeX 数学公式、图表和 Shortcodes 元素，丰富您的内容。目录、面包屑导航、分页、侧边栏导航等均自动生成。 多语言与 SEO 就绪 - 通过 Hugo 的多语言模式轻松创建多语言网站。开箱即用支持 SEO 标签、Open Graph 和 Twitter Cards。 "},"title":"文档"},"/docs/advanced/":{"data":{"":"This section covers some advanced topics of the theme.\nMulti-language Customization Comments System "},"title":"Advanced"},"/docs/advanced/_index.fa/":{"data":{"":"این بخش برخی از موضوعات پیشرفته تم را پوشش می‌دهد.\nچند زبانه سفارشی‌سازی سیستم نظردهی "},"title":"پیشرفته"},"/docs/advanced/_index.ja/":{"data":{"":"このセクションでは、テーマの上級者向けトピックをカバーします。\n多言語対応 カスタマイズ コメントシステム "},"title":"上級者向け"},"/docs/advanced/_index.zh-cn/":{"data":{"":"本节涵盖了一些主题的高级内容。\n多语言 自定义 评论系统 "},"title":"高级"},"/docs/advanced/comments.fa/":{"data":{"":"هگزترا از افزودن سیستم نظردهی به سایت شما پشتیبانی می‌کند. در حال حاضر giscus پشتیبانی می‌شود.","giscus#giscus":"giscus یک سیستم نظردهی است که توسط GitHub Discussions طراحی شده است. رایگان و متن باز است.\nبرای فعال کردن giscus، باید موارد زیر را به پرونده پیکربندی سایت اضافه کنید:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e تنظیمات giscus را می توانید از وب‌سایت giscus.app ساخت. جزئیات بیشتر را نیز می‌توانید در آنجا ببینید.\nدیدگاه‌ها را می‌توانید برای یک صفحه خاص در بالای همان صفحه فعال یا غیرفعال کرد:\ncontent/docs/about.md--- title: درباره ما comments: true --- "},"title":"نظردهی"},"/docs/advanced/comments.ja/":{"data":{"":"Hextraは、サイトにコメントシステムを追加することをサポートしています。 現在、giscusがサポートされています。","giscus#giscus":"giscusは、GitHub Discussionsを利用したコメントシステムです。無料でオープンソースです。\ngiscusを有効にするには、サイトの設定ファイルに以下を追加する必要があります：\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003cリポジトリ\u003e repoId: \u003cリポジトリID\u003e category: \u003cカテゴリ\u003e categoryId: \u003cカテゴリID\u003e giscusの設定は、giscus.appのウェブサイトから構築できます。詳細もそこで確認できます。\n特定のページでコメントを有効または無効にするには、ページのフロントマターに以下を追加します：\ncontent/docs/about.md--- title: について comments: true --- "},"title":"コメント"},"/docs/advanced/comments.zh-cn/":{"data":{"":"Hextra 支持为您的网站添加评论系统。 目前支持 giscus。","giscus#giscus":"giscus 是一个由 GitHub Discussions 提供支持的评论系统。它是免费且开源的。\n要启用 giscus，您需要在网站配置文件中添加以下内容：\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003c仓库\u003e repoId: \u003c仓库 ID\u003e category: \u003c分类\u003e categoryId: \u003c分类 ID\u003e giscus 的配置可以从 giscus.app 网站生成。更多详细信息也可以在那里找到。\n可以在页面的 front matter 中为特定页面启用或禁用评论：\ncontent/docs/about.md--- title: 关于 comments: true --- "},"title":"评论"},"/docs/advanced/comments/":{"data":{"":"Hextra supports adding comments system to your site. Currently giscus is supported.","giscus#giscus":"giscus is a comments system powered by GitHub Discussions. It is free and open source.\nTo enable giscus, you need to add the following to the site configuration file:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e The giscus configurations can be constructed from the giscus.app website. More details can also be found there.\nComments can be enabled or disabled for a specific page in the page front matter:\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/docs/advanced/customization.fa/":{"data":{"":"هگزترا برخی از گزینه‌های سفارشی‌سازی پیش‌فرض را در پرونده hugo.yaml برای پیکربندی تم ارائه می‌کند. این صفحه گزینه‌های موجود و نحوه سفارشی‌سازی بیشتر تم را توضیح می‌دهد.","css-سفارشی#CSS سفارشی":"برای افزودن CSS سفارشی، باید یک پرونده assets/css/custom.css در سایت خود ایجاد کنیم. هگزترا به طور خودکار این پرونده را بارگیری خواهد کرد.\nخانواده فونت خانواده فونت برای محتوا را می‌توانید با استفاده از این سفارشی کنید:\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } عنصر کد درون‌خطی رنگ متن ترکیب شده با متن دیگر را می‌توانید با موارد زیر سفارشی کرد:\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } رنگ اصلی رنگ اصلی تم را می‌توانید با تنظیم متغیرهای --primary-hue و --primary-saturation سفارشی کرد:\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; } برجسته‌کردن سینتکس فهرست تم‌های برجسته‌کردن سینتکس در دسترس گالری Chroma Styles موجود است. شیوه‌نامه را می‌توانید با استفاده از دستور زیر تولید کرد:\nhugo gen chromastyles --style=github برای نادیده گرفتن طرح زمینه برجسته‌کردن سینتکس پیش‌فرض، می‌توانید استایل‌های تولید شده را به پرونده CSS سفارشی اضافه کنیم.","اسکریپتهای-سفارشی#اسکریپت‌های سفارشی":"با افزودن پرونده زیر می‌توانید اسکریپت‌های سفارشی را برای هر صفحه به انتهای اون اضافه کنید:\nlayouts/partials/custom/head-end.html ","سفارشیسازی-بیشتر#سفارشی‌سازی بیشتر":"چیزی را که دنبالش بودید پیدا نکردید؟ با خیال راحت بحثی را باز کنید یا به موضوع کمک کنید!","طرحبندیهای-سفارشی#طرح‌بندی‌های سفارشی":"با ایجاد پرونده‌ای با همین نام در دایرکتوری layouts سایت خود، می‌توانید طرح‌های تم را نادیده بگیرید. به عنوان مثال، برای لغو طرح‌بندی single.html برای مستندات، یک پروندهlayouts/docs/single.html در سایت خود ایجاد کنید.\nبرای اطلاعات بیشتر، به Templateهای هیوگو مراجعه کنید."},"title":"سفارشی‌سازی"},"/docs/advanced/customization.ja/":{"data":{"":"Hextraは、hugo.yaml設定ファイル内でいくつかのデフォルトのカスタマイズオプションを提供し、テーマを設定できます。 このページでは、利用可能なオプションと、テーマをさらにカスタマイズする方法について説明します。","さらなるカスタマイズ#さらなるカスタマイズ":"探しているものが見つかりませんでしたか？ディスカッションを開くか、テーマに貢献してください！","カスタムcss#カスタムCSS":"カスタムCSSを追加するには、サイト内にassets/css/custom.cssファイルを作成する必要があります。Hextraはこのファイルを自動的に読み込みます。\nフォントファミリー コンテンツのフォントファミリーは、以下のようにカスタマイズできます：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } インラインコード要素 other textと混在するテキストの色は、以下のようにカスタマイズできます：\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } プライマリカラー テーマのプライマリカラーは、--primary-hue、--primary-saturation、--primary-lightness変数を設定することでカスタマイズできます：\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; --primary-lightness: 50%; } テーマのさらなるカスタマイズ テーマは、公開されているCSSクラスを介してデフォルトのスタイルをオーバーライドすることでさらにカスタマイズできます。フッター要素をカスタマイズする例：\nassets/css/custom.css.hextra-footer { /* フッター要素に適用されるスタイル */ } .hextra-footer:is(html[class~=\"dark\"] *) { /* ダークモードでのフッター要素に適用されるスタイル */ } 以下のクラスを使用して、テーマのさまざまな部分をカスタマイズできます。\n一般 hextra-scrollbar - スクロールバー要素 content - ページコンテンツコンテナ ショートコード バッジ hextra-badge - バッジ要素 カード hextra-card - カード要素 hextra-card-image - カード画像要素 hextra-card-icon - カードアイコン要素 hextra-card-subtitle - カードサブタイトル要素 カードグリッド hextra-cards - カードグリッドコンテナ Jupyter Notebook hextra-jupyter-code-cell - Jupyterコードセルコンテナ hextra-jupyter-code-cell-outputs-container - Jupyterコードセル出力コンテナ hextra-jupyter-code-cell-outputs - Jupyterコードセル出力div要素 PDF hextra-pdf - PDFコンテナ要素 ステップ steps - ステップコンテナ タブ hextra-tabs-panel - タブパネルコンテナ hextra-tabs-toggle - タブトグルボタン ファイルツリー hextra-filetree - ファイルツリーコンテナ フォルダ hextra-filetree-folder - ファイルツリーフォルダコンテナ ナビゲーションバー nav-container - ナビゲーションバーコンテナ nav-container-blur - ナビゲーションバーコンテナのぼかし要素 hamburger-menu - ハンバーガーメニューボタン フッター hextra-footer - フッター要素 hextra-custom-footer - カスタムフッターセクションコンテナ 検索 search-wrapper - 検索ラッパーコンテナ search-input - 検索入力要素 search-results - 検索結果リストコンテナ 目次 hextra-toc - 目次コンテナ サイドバー mobile-menu-overlay - モバイルメニューのオーバーレイ要素 sidebar-container - サイドバーコンテナ sidebar-active-item - サイドバーのアクティブアイテム 言語スイッチャー language-switcher - 言語スイッチャーボタン language-options - 言語オプションコンテナ テーマトグル theme-toggle - テーマトグルボタン コードコピーボタン hextra-code-copy-btn-container - コードコピーボタンコンテナ hextra-code-copy-btn - コードコピーボタン コードブロック hextra-code-block - コードブロックコンテナ フィーチャーカード hextra-feature-card - フィーチャーカードリンク要素 フィーチャーグリッド hextra-feature-grid - フィーチャーグリッドコンテナ パンくずリスト パンくずリスト用の特定のクラスはありません。\nシンタックスハイライト 利用可能なシンタックスハイライトテーマのリストは、Chroma Styles Galleryで確認できます。スタイルシートは以下のコマンドで生成できます：\nhugo gen chromastyles --style=github デフォルトのシンタックスハイライトテーマをオーバーライドするには、生成されたスタイルをカスタムCSSファイルに追加します。","カスタムスクリプト#カスタムスクリプト":"すべてのページのheadの最後にカスタムスクリプトを追加するには、以下のファイルを追加します：\nlayouts/partials/custom/head-end.html ","カスタムレイアウト#カスタムレイアウト":"テーマのレイアウトは、サイトのlayoutsディレクトリ内に同じ名前のファイルを作成することでオーバーライドできます。 例えば、ドキュメント用のsingle.htmlレイアウトをオーバーライドするには、サイト内にlayouts/docs/single.htmlファイルを作成します。\n詳細については、[Hugoテンプレート][hugo-template-docs]を参照してください。","フッターのカスタムセクション#フッターのカスタムセクション":"フッターに追加のセクションを追加するには、サイト内にlayouts/partials/custom/footer.htmlファイルを作成します。\nlayouts/partials/custom/footer.html\u003c!-- ここにフッター要素を追加 --\u003e 追加されたセクションは、フッターの著作権セクションの前に追加されます。 HTMLとHugoテンプレート構文を使用して、独自のコンテンツを追加できます。\nフッターセクションで利用可能なHugo変数は、.switchesVisibleと.copyrightVisibleです。"},"title":"カスタマイズ"},"/docs/advanced/customization.zh-cn/":{"data":{"":"Hextra 在 hugo.yaml 配置文件中提供了一些默认的自定义选项，用于配置主题。 本页描述了可用的选项以及如何进一步自定义主题。","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建一个文件 assets/css/custom.css。Hextra 会自动加载此文件。\n字体 内容的字体可以通过以下方式自定义：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } 内联代码元素 与 其他文本 混合的文本颜色可以通过以下方式自定义：\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } 主色调 主题的主色调可以通过设置 --primary-hue、--primary-saturation 和 --primary-lightness 变量来自定义：\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; --primary-lightness: 50%; } 进一步的主题自定义 可以通过覆盖暴露的 CSS 类来进一步自定义主题。以下是一个自定义页脚元素的示例：\nassets/css/custom.css.hextra-footer { /* 样式将应用于页脚元素 */ } .hextra-footer:is(html[class~=\"dark\"] *) { /* 样式将应用于暗模式下的页脚元素 */ } 以下类可用于自定义主题的各个部分。\n通用 hextra-scrollbar - 滚动条元素 content - 页面内容容器 短代码 徽章 hextra-badge - 徽章元素 卡片 hextra-card - 卡片元素 hextra-card-image - 卡片图片元素 hextra-card-icon - 卡片图标元素 hextra-card-subtitle - 卡片副标题元素 卡片组 hextra-cards - 卡片网格容器 Jupyter Notebook hextra-jupyter-code-cell - Jupyter 代码单元容器 hextra-jupyter-code-cell-outputs-container - Jupyter 代码单元输出容器 hextra-jupyter-code-cell-outputs - Jupyter 代码单元输出 div 元素 PDF hextra-pdf - PDF 容器元素 步骤 steps - 步骤容器 标签页 hextra-tabs-panel - 标签页面板容器 hextra-tabs-toggle - 标签页切换按钮 文件树 hextra-filetree - 文件树容器 文件夹 hextra-filetree-folder - 文件树文件夹容器 导航栏 nav-container - 导航栏容器 nav-container-blur - 导航栏模糊元素 hamburger-menu - 汉堡菜单按钮 页脚 hextra-footer - 页脚元素 hextra-custom-footer - 自定义页脚部分容器 搜索 search-wrapper - 搜索包装容器 search-input - 搜索输入元素 search-results - 搜索结果列表容器 目录 hextra-toc - 目录容器 侧边栏 mobile-menu-overlay - 移动菜单的覆盖元素 sidebar-container - 侧边栏容器 sidebar-active-item - 侧边栏中的活动项 语言切换器 language-switcher - 语言切换按钮 language-options - 语言选项容器 主题切换 theme-toggle - 主题切换按钮 代码复制按钮 hextra-code-copy-btn-container - 代码复制按钮容器 hextra-code-copy-btn - 代码复制按钮 代码块 hextra-code-block - 代码块容器 功能卡片 hextra-feature-card - 功能卡片链接元素 功能网格 hextra-feature-grid - 功能网格容器 面包屑导航 面包屑导航没有特定的类。\n语法高亮 可用的语法高亮主题列表可在 Chroma 样式库 中找到。可以使用以下命令生成样式表：\nhugo gen chromastyles --style=github 要覆盖默认的语法高亮主题，可以将生成的样式添加到自定义 CSS 文件中。","自定义布局#自定义布局":"可以通过在站点的 layouts 目录中创建同名文件来覆盖主题的布局。 例如，要覆盖文档的 single.html 布局，可以在站点中创建文件 layouts/docs/single.html。\n更多信息，请参阅 [Hugo 模板文档][hugo-template-docs]。","自定义脚本#自定义脚本":"你可以通过添加以下文件在每个页面的 head 末尾添加自定义脚本：\nlayouts/partials/custom/head-end.html ","自定义页脚额外部分#自定义页脚额外部分":"你可以通过在站点中创建文件 layouts/partials/custom/footer.html 来在页脚中添加额外部分。\nlayouts/partials/custom/footer.html\u003c!-- 你的页脚元素在这里 --\u003e 添加的部分将出现在页脚的版权部分之前。 你可以使用 HTML 和 Hugo 模板语法 来添加自己的内容。\n页脚部分可用的 Hugo 变量有：.switchesVisible 和 .copyrightVisible。","进一步自定义#进一步自定义":"没有找到你想要的？欢迎 发起讨论 或为主题做出贡献！"},"title":"自定义"},"/docs/advanced/customization/":{"data":{"":"Hextra offers some default customization options in the hugo.yaml config file to configure the theme. This page describes the available options and how to customize the theme further.","custom-css#Custom CSS":"To add custom CSS, we need to create a file assets/css/custom.css in our site. Hextra will automatically load this file.\nFont Family The font family of the content can be customized using:\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } Inline Code Element The color of text mixed with other text can customized with:\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } Primary Color The primary color of the theme can be customized by setting the --primary-hue, --primary-saturation and --primary-lightness variables:\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; --primary-lightness: 50%; } Further Theme Customization The theme can be further customized by overriding the default styles via the exposed css classes. An example for customizing the footer element:\nassets/css/custom.css.hextra-footer { /* Styles will be applied to the footer element */ } .hextra-footer:is(html[class~=\"dark\"] *) { /* Styles will be applied to the footer element in dark mode */ } The following classes can be used to customize various parts of the theme.\nGeneral hextra-scrollbar - The scrollbar element content - Page content container Shortcodes Badge hextra-badge - The badge element Card hextra-card - The card element hextra-card-image - The card image element hextra-card-icon - The card icon element hextra-card-subtitle - The card subtitle element Cards hextra-cards - The cards grid container Jupyter Notebook hextra-jupyter-code-cell - The Jupyter code cell container hextra-jupyter-code-cell-outputs-container - The Jupyter code cell outputs container hextra-jupyter-code-cell-outputs - The Jupyter code cell output div element PDF hextra-pdf - The PDF container element Steps steps - The steps container Tabs hextra-tabs-panel - The tabs panel container hextra-tabs-toggle - The tabs toggle button Filetree hextra-filetree - The filetree container Folder hextra-filetree-folder - The filetree folder container Navbar nav-container - The navbar container nav-container-blur - The navbar container in blur element hamburger-menu - The hamburger menu button Footer hextra-footer - The footer element hextra-custom-footer - The custom footer section container Search search-wrapper - The search wrapper container search-input - The search input element search-results - The search results list container Table of Contents hextra-toc - The table of contents container Sidebar mobile-menu-overlay - The overlay element for the mobile menu sidebar-container - The sidebar container sidebar-active-item - The active item in the sidebar Language Switcher language-switcher - The language switcher button language-options - The language options container Theme Toggle theme-toggle - The theme toggle button Code Copy Button hextra-code-copy-btn-container - The code copy button container hextra-code-copy-btn - The code copy button Code Block hextra-code-block - The code block container Feature Card hextra-feature-card - The feature card link element Feature Grid hextra-feature-grid - The feature grid container Breadcrumbs No specific class is available for breadcrumbs.\nSyntax Highlighting List of available syntax highlighting themes are available at Chroma Styles Gallery. The stylesheet can be generated using the command:\nhugo gen chromastyles --style=github To override the default syntax highlighting theme, we can add the generated styles to the custom CSS file.","custom-extra-section-in-footer#Custom Extra Section in Footer":"You can add extra section in the footer by creating a file layouts/partials/custom/footer.html in your site.\nlayouts/partials/custom/footer.html\u003c!-- Your footer element here --\u003e The added section will be added before the copyright section in the footer. You can use HTML and Hugo template syntax to add your own content.\nHugo variables available in the footer section are: .switchesVisible and .displayCopyright.","custom-layouts#Custom Layouts":"The layouts of the theme can be overridden by creating a file with the same name in the layouts directory of your site. For example, to override the single.html layout for docs, create a file layouts/docs/single.html in your site.\nFor further information, refer to the [Hugo Templates][hugo-template-docs].","custom-scripts#Custom Scripts":"You may add custom scripts to the end of the head for every page by adding the following file:\nlayouts/partials/custom/head-end.html ","further-customization#Further Customization":"Didn’t find what you were looking for? Feel free to open a discussion or make a contribution to the theme!"},"title":"Customization"},"/docs/advanced/multi-language.fa/":{"data":{"":"هگزترا از ایجاد سایت با چندین زبان با استفاده از حالت چند زبانه Hugo پشتیبانی می‌کند.","بیشتر-بخوانید#بیشتر بخوانید":" حالت چند زبانه هیوگو هیوگو چند زبانه قسمت ۱: ترجمه محتوا هیوگو چند زبانه قسمت ۲: بومی‌سازی رشته‌ها ","ترجمه-آیتمهای-منو#ترجمه آیتم‌های منو":"برای ترجمه آیتم‌های منو در نوار پیمایش، باید فیلد identifier را تنظیم کنیم:\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 و آنها را در پرونده i18n مربوطه ترجمه کنید:\ni18n/fa.yamldocumentation: مستندات blog: وبلاگ ","ترجمه-رشتهها#ترجمه رشته‌ها":"برای ترجمه رشته‌ها در مکان‌های دیگر، باید ترجمه را به پرونده i18n مربوطه اضافه کنیم:\ni18n/fa.yamlreadMore: ادامه مطلب فهرستی از رشته‌های استفاده شده در تم را می‌توان در پرونده i18n/en.yaml پیدا کرد.","فعالسازی-چند-زبانه#فعال‌سازی چند زبانه":"برای اینکه سایت ما چند زبانه شود، باید زبان‌های پشتیبانی شده را به Hugo بگوییم. باید به پرونده پیکربندی سایت اضافه کنیم:\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fa: languageName: فارسی weight: 2 ja: languageName: 日本語 weight: 3 ","مدیریت-ترجمهها-بر-اساس-نام-پرونده#مدیریت ترجمه‌ها بر اساس نام پرونده":"Hugo از مدیریت ترجمه با نام پرونده پشتیبانی می‌کند. به عنوان مثال، اگر یک پرونده content/docs/_index.md به زبان انگلیسی داشته باشیم، می توانیم یک پرونده content/docs/_index.fa.md برای ترجمه فارسی ایجاد کنیم.\ncontent docs _index.md _index.fa.md _index.ja.md توجه: Hugo همچنین از تترجمه توسط دایرکتوری محتوا پشتیبانی می‌کند."},"title":"چند زبانه"},"/docs/advanced/multi-language.ja/":{"data":{"":"Hextraは、Hugoの多言語モードを使用して、複数の言語でサイトを作成することをサポートしています。","さらに詳しく#さらに詳しく":" Hugo 多言語モード Hugo 多言語 Part 1: コンテンツ翻訳 Hugo 多言語 Part 2: 文字列のローカライズ ","ファイル名による翻訳管理#ファイル名による翻訳管理":"Hugoは、ファイル名による翻訳管理をサポートしています。例えば、英語のファイル content/docs/_index.md がある場合、フランス語の翻訳用に content/docs/_index.fr.md というファイルを作成できます。\ncontent docs _index.md _index.fr.md _index.ja.md 注: Hugoはコンテンツディレクトリによる翻訳もサポートしています。","メニュー項目の翻訳#メニュー項目の翻訳":"ナビゲーションバーのメニュー項目を翻訳するには、identifier フィールドを設定する必要があります：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 そして、対応するi18nファイルで翻訳します：\ni18n/fr.yamldocumentation: Documentation blog: Blog ","多言語対応を有効にする#多言語対応を有効にする":"サイトを多言語対応にするためには、Hugoにサポートする言語を伝える必要があります。サイトの設定ファイルに以下を追加します：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","文字列の翻訳#文字列の翻訳":"他の場所の文字列を翻訳するには、対応するi18nファイルに翻訳を追加する必要があります：\ni18n/fr.yamlreadMore: Lire la suite テーマで使用されている文字列のリストは、i18n/en.yaml ファイルにあります。"},"title":"多言語対応"},"/docs/advanced/multi-language.zh-cn/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式创建多语言网站。","了解更多#了解更多":" Hugo 多语言模式 Hugo 多语言第一部分：内容翻译 Hugo 多语言第二部分：字符串本地化 ","启用多语言#启用多语言":"要使我们的网站支持多语言，我们需要告诉 Hugo 支持的语言。我们需要在站点配置文件中添加：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","翻译字符串#翻译字符串":"要翻译其他地方的字符串，我们需要将翻译添加到相应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite 主题中使用的字符串列表可以在 i18n/en.yaml 文件中找到。","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，我们需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 并在相应的 i18n 文件中进行翻译：\ni18n/fr.yamldocumentation: Documentation blog: Blog ","通过文件名管理翻译#通过文件名管理翻译":"Hugo 支持通过文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，我们可以创建一个文件 content/docs/_index.fr.md 作为法语翻译。\ncontent docs _index.md _index.fr.md _index.ja.md 注意：Hugo 还支持通过内容目录进行翻译。"},"title":"多语言支持"},"/docs/advanced/multi-language/":{"data":{"":"Hextra supports creating site with multiple languages using Hugo’s multilingual mode.","enable-multi-language#Enable Multi-language":"To make our site multi-language, we need to tell Hugo the supported languages. We need to add to the site configuration file:\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","manage-translations-by-filename#Manage Translations by Filename":"Hugo supports managing translations by filename. For example, if we have a file content/docs/_index.md in English, we can create a file content/docs/_index.fr.md for French translation.\ncontent docs _index.md _index.fr.md _index.ja.md Note: Hugo also supports Translation by content directory.","read-more#Read More":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","translate-menu-items#Translate Menu Items":"To translate menu items in the navigation bar, we need to set the identifier field:\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 and translate them in the corresponding i18n file:\ni18n/fr.yamldocumentation: Documentation blog: Blog ","translate-strings#Translate Strings":"To translate strings on the other places, we need to add the translation to the corresponding i18n file:\ni18n/fr.yamlreadMore: Lire la suite A list of strings used in the theme can be found in the i18n/en.yaml file."},"title":"Multi-language"},"/docs/getting-started.fa/":{"data":{"":"","بعدی#بعدی":"برای شروع اضافه کردن مطالب بیشتر، بخش‌های زیر را کاوش کنید:\nسازماندهی پرونده‌ها پیکربندی مارک‌داون ","شروع-به-عنوان-پروژه-جدید#شروع به عنوان پروژه جدید":"دو راه اصلی برای اضافه کردن تم هگزترا به پروژه Hugo وجود دارد:\nماژول‌های Hugo (توصیه می‌شود): ساده‌ترین و توصیه شده‌ترین. ماژول‌های Hugo به شما امکان می‌دهند تم را مستقیما از منبع آنلاین آن وارد کنید. تم به صورت خودکار دانلود و توسط Hugo مدیریت می‌شود. ساب‌ماژول گیت: در عوض، هگزترا را به عنوان یک ساب‌ماژول گیت اضافه کنید. تم توسط گیت دانلود شده و در پوشه themes پروژه شما ذخیره می‌شود. هگزترا را به عنوان ماژول Hugo راه‌اندازی کنید پیش‌نیازها قبل از شروع، باید این نرم‌افزارها را نصب کنید:\nHugo (extended version) Git Go مراحل راه‌انداختن یک سایت جدید Hugo hugo new site my-site --format=yaml پیکربندی تم هگزترا از طریق ‌ماژول # مقداردهی اولیه ماژول هیوگو cd my-site hugo mod init github.com/username/my-site # افزودن تم هگزترا hugo mod get github.com/imfing/hextra با افزودن موارد زیر، hugo.yaml را برای استفاده از تم هگزترا پیکربندی کنید:\nmodule: imports: - path: github.com/imfing/hextra اولین صفحه‌های محتوای خود را ایجاد کنید ایجاد صفحه محتوای جدید برای صفحه اصلی و صفحه مستندات:\nhugo new content/_index.md hugo new content/docs/_index.md پیش‌نمایش سایت به صورت محلی hugo server --buildDrafts --disableFastRender پیش‌نمایش سایت جدید شما در http://localhost:1313/ در دسترس است.\nچگونه تم را به‌روز کنیم؟ برای به‌روزرسانی همه ماژول‌های Hugo در پروژه خود به آخرین نسخه‌هایشان، دستور زیر را اجرا کنید:\nhugo mod get -u برای به‌روزرسانی هگزترا به آخرین نسخه منتشر شده، دستور زیر را اجرا کنید:\nhugo mod get -u github.com/imfing/hextra برای جزئیات بیشتر به ماژول‌های هیوگو مراجعه کنید.\nهگزترا را به عنوان ساب‌ماژول Git راه‌اندازی کنید پیش‌نیازها قبل از شروع، باید این نرم‌افزارها را نصب کنید:\nHugo (extended version) Git مراحل راه‌انداختن یک سایت جدید Hugo hugo new site my-site --format=yaml افزودن تم هگزترا به عنوان یک ساب‌ماژول Git git submodule add https://github.com/imfing/hextra.git themes/hextra با افزودن موارد زیر، hugo.yaml را برای استفاده از تم هگزترا پیکربندی کنید:\ntheme: hextra اولین صفحه‌های محتوای خود را ایجاد کنید ایجاد صفحه محتوای جدید برای صفحه اصلی و صفحه مستندات:\nhugo new content/_index.md hugo new content/docs/_index.md پیش‌نمایش سایت به صورت محلی hugo server --buildDrafts --disableFastRender پیش‌نمایش سایت جدید شما در http://localhost:1313/ در دسترس است.\nهنگام استفاده از CI/CD برای به‌کاراندازی وب‌سایت Hugo، از اجرای دستور زیر قبل از اجرای دستور hugo مطمئن شوید و ضروری است.\ngit submodule update --init اجرا نشدن این دستور باعث می‌شود که پوشه تم با پرونده‌های تم هگزترا پر نشود و منجر به خرابی ساخت شود.\nچگونه تم را به‌روز کنیم؟ برای به‌روزرسانی تمام ساب‌ماژول‌های در مخزن خود به آخرین commitها که موجود هست، دستور زیر را اجرا کنید:\ngit submodule update --remote برای به‌روزرسانی هگزترا به آخرین commit، دستور زیر را اجرا کنید:\ngit submodule update --remote themes/hextra برای جزئیات بیشتر به ساب‌ماژول‌های Git مراجعه کنید.","شروع-سریع-از-طریق-template#شروع سریع از طریق Template":" imfing/hextra-starter-template\nبا استفاده از template در بالای صفحه‌ای مخزن می‌توانید به سرعت شروع به کار کنید.\nما یک گردش کاری GitHub Actions ارائه کرده‌ایم که می‌تواند به ساخت و به‌کاراندازی خودکار سایت شما در گیت‌هاب Pages، برای میزبانی رایگان کمک کند. برای گزینه‌های بیشتر، به‌کاراندازی سایت را بررسی کنید.\n🌐 نسخه‌ي نمایشی ↖"},"title":"شروع کنید"},"/docs/getting-started.ja/":{"data":{"":"","テンプレートからクイックスタート#テンプレートからクイックスタート":" imfing/hextra-starter-template\n上記のテンプレートリポジトリを使用して、すぐに始めることができます。\nGitHub Actionsワークフローを提供しており、サイトを自動的にビルドしてGitHub Pagesにデプロイし、無料でホストすることができます。 その他のオプションについては、サイトのデプロイを確認してください。\n🌐 デモ ↗","新しいプロジェクトとして始める#新しいプロジェクトとして始める":"HugoプロジェクトにHextraテーマを追加する主な方法は2つあります：\nHugoモジュール（推奨）: 最も簡単で推奨される方法です。Hugoモジュールを使用すると、テーマを直接オンラインソースから取り込むことができます。テーマは自動的にダウンロードされ、Hugoによって管理されます。\nGitサブモジュール: または、HextraをGitサブモジュールとして追加します。テーマはGitによってダウンロードされ、プロジェクトのthemesフォルダに保存されます。\nHugoモジュールとしてHextraをセットアップ 前提条件 開始する前に、以下のソフトウェアがインストールされている必要があります：\nHugo（拡張版） Git Go 手順 新しいHugoサイトを初期化 hugo new site my-site --format=yaml モジュール経由でHextraテーマを設定 # Hugoモジュールを初期化 cd my-site hugo mod init github.com/username/my-site # Hextraテーマを追加 hugo mod get github.com/imfing/hextra hugo.yamlを設定してHextraテーマを使用するために、以下を追加します：\nmodule: imports: - path: github.com/imfing/hextra 最初のコンテンツページを作成 ホームページとドキュメントページの新しいコンテンツページを作成します：\nhugo new content/_index.md hugo new content/docs/_index.md ローカルでサイトをプレビュー hugo server --buildDrafts --disableFastRender これで、新しいサイトのプレビューがhttp://localhost:1313/で利用可能です。\nテーマを更新するには？ プロジェクト内のすべてのHugoモジュールを最新バージョンに更新するには、次のコマンドを実行します：\nhugo mod get -u Hextraを最新リリースバージョンに更新するには、次のコマンドを実行します：\nhugo mod get -u github.com/imfing/hextra 詳細については、Hugoモジュールを参照してください。\nGitサブモジュールとしてHextraをセットアップ 前提条件 開始する前に、以下のソフトウェアがインストールされている必要があります：\nHugo（拡張版） Git 手順 新しいHugoサイトを初期化 hugo new site my-site --format=yaml HextraテーマをGitサブモジュールとして追加 git submodule add https://github.com/imfing/hextra.git themes/hextra hugo.yamlを設定してHextraテーマを使用するために、以下を追加します：\ntheme: hextra 最初のコンテンツページを作成 ホームページとドキュメントページの新しいコンテンツページを作成します：\nhugo new content/_index.md hugo new content/docs/_index.md ローカルでサイトをプレビュー hugo server --buildDrafts --disableFastRender 新しいサイトのプレビューがhttp://localhost:1313/で利用可能です。\nCI/CDを使用してHugoウェブサイトをデプロイする場合、hugoコマンドを実行する前に以下のコマンドを実行することが重要です。\ngit submodule update --init このコマンドを実行しないと、テーマフォルダにHextraテーマファイルが取り込まれず、ビルドが失敗します。\nテーマを更新するには？ リポジトリ内のすべてのサブモジュールを最新のコミットに更新するには、次のコマンドを実行します：\ngit submodule update --remote Hextraを最新のコミットに更新するには、次のコマンドを実行します：\ngit submodule update --remote themes/hextra 詳細については、Gitサブモジュールを参照してください。","次へ#次へ":"以下のセクションを探索して、さらにコンテンツを追加し始めましょう：\nファイルの整理 設定 Markdown "},"title":"はじめに"},"/docs/getting-started.zh-cn/":{"data":{"":"","下一步#下一步":"探索以下部分以开始添加更多内容：\n组织文件 配置 Markdown ","从模板快速开始#从模板快速开始":" imfing/hextra-starter-template\n您可以通过使用上述模板仓库快速入门。\n我们提供了一个 GitHub Actions 工作流，可以帮助自动构建并将您的站点部署到 GitHub Pages，并免费托管。 更多选项，请查看 部署站点。\n🌐 演示 ↗","作为新项目开始#作为新项目开始":"有两种主要方式将 Hextra 主题添加到您的 Hugo 项目中：\nHugo 模块（推荐）：最简单且推荐的方法。Hugo 模块允许您直接从在线源拉取主题。主题会自动下载并由 Hugo 管理。\nGit 子模块：或者，将 Hextra 添加为 Git 子模块。主题由 Git 下载并存储在您项目的 themes 文件夹中。\n将 Hextra 设置为 Hugo 模块 先决条件 在开始之前，您需要安装以下软件：\nHugo（扩展版） Git Go 步骤 初始化一个新的 Hugo 站点 hugo new site my-site --format=yaml 通过模块配置 Hextra 主题 # 初始化 Hugo 模块 cd my-site hugo mod init github.com/username/my-site # 添加 Hextra 主题 hugo mod get github.com/imfing/hextra 配置 hugo.yaml 以使用 Hextra 主题，添加以下内容：\nmodule: imports: - path: github.com/imfing/hextra 创建您的内容页面 为主页和文档页面创建新的内容页面：\nhugo new content/_index.md hugo new content/docs/_index.md 本地预览站点 hugo server --buildDrafts --disableFastRender 恭喜，您的新站点预览可在 http://localhost:1313/ 查看。\n如何更新主题？ 要更新项目中所有 Hugo 模块到最新版本，请运行以下命令：\nhugo mod get -u 要将 Hextra 更新到 最新发布版本，请运行以下命令：\nhugo mod get -u github.com/imfing/hextra 有关更多详细信息，请参阅 Hugo 模块。\n将 Hextra 设置为 Git 子模块 先决条件 在开始之前，您需要安装以下软件：\nHugo（扩展版） Git 步骤 初始化一个新的 Hugo 站点 hugo new site my-site --format=yaml 将 Hextra 主题添加为 Git 子模块 git submodule add https://github.com/imfing/hextra.git themes/hextra 配置 hugo.yaml 以使用 Hextra 主题，添加以下内容：\ntheme: hextra 创建您的内容页面 为主页和文档页面创建新的内容页面：\nhugo new content/_index.md hugo new content/docs/_index.md 本地预览站点 hugo server --buildDrafts --disableFastRender 您的新站点预览可在 http://localhost:1313/ 查看。\n当使用 CI/CD 部署 Hugo 网站时，确保在运行 hugo 命令之前执行以下命令至关重要。\ngit submodule update --init 如果不运行此命令，主题文件夹将不会被 Hextra 主题文件填充，导致构建失败。\n如何更新主题？ 要更新仓库中所有子模块到最新提交，请运行以下命令：\ngit submodule update --remote 要将 Hextra 更新到最新提交，请运行以下命令：\ngit submodule update --remote themes/hextra 有关更多详细信息，请参阅 Git 子模块。"},"title":"入门指南"},"/docs/getting-started/":{"data":{"":"","next#Next":"Explore the following sections to start adding more contents:\nOrganize Files Configuration Markdown ","quick-start-from-template#Quick Start from Template":" imfing/hextra-starter-template\nYou could quickly get started by using the above template repository.\nWe have provided a GitHub Actions workflow which can help automatically build and deploy your site to GitHub Pages, and host it for free. For more options, check out Deploy Site.\n🌐 Demo ↗","start-as-new-project#Start as New Project":"There are two main ways to add the Hextra theme to your Hugo project:\nHugo Modules (Recommended): The simplest and recommended method. Hugo modules let you pull in the theme directly from its online source. Theme is downloaded automatically and managed by Hugo.\nGit Submodule: Alternatively, add Hextra as a Git Submodule. The theme is downloaded by Git and stored in your project’s themes folder.\nSetup Hextra as Hugo module Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Go Steps Initialize a new Hugo site hugo new site my-site --format=yaml Configure Hextra theme via module # initialize hugo module cd my-site hugo mod init github.com/username/my-site # add Hextra theme hugo mod get github.com/imfing/hextra Configure hugo.yaml to use Hextra theme by adding the following:\nmodule: imports: - path: github.com/imfing/hextra Create your first content pages Create new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md Preview the site locally hugo server --buildDrafts --disableFastRender Voila, your new site preview is available at http://localhost:1313/.\nHow to update theme? To update all Hugo modules in your project to their latest versions, run the following command:\nhugo mod get -u To update Hextra to the latest released version, run the following command:\nhugo mod get -u github.com/imfing/hextra See Hugo Modules for more details.\nSetup Hextra as Git submodule Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Steps Initialize a new Hugo site hugo new site my-site --format=yaml Add Hextra theme as a Git submodule git submodule add https://github.com/imfing/hextra.git themes/hextra Configure hugo.yaml to use Hextra theme by adding the following:\ntheme: hextra Create your first content pages Create new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md Preview the site locally hugo server --buildDrafts --disableFastRender Your new site preview is available at http://localhost:1313/.\nWhen using CI/CD for Hugo website deployment, it’s essential to ensure that the following command is executed before running the hugo command.\ngit submodule update --init Failure to run this command results in the theme folder not being populated with Hextra theme files, leading to a build failure.\nHow to update theme? To update all submodules in your repository to their latest commits, run the following command:\ngit submodule update --remote To update Hextra to the latest commit, run the following command:\ngit submodule update --remote themes/hextra See Git submodules for more details."},"title":"Getting Started"},"/docs/guide/":{"data":{"":"Explore the following sections to learn how to use Hextra:\nOrganize Files Configuration Markdown Syntax Highlighting LaTeX Diagrams Shortcodes Deploy Site "},"title":"Guide"},"/docs/guide/_index.fa/":{"data":{"":"برای یادگیری نحوه استفاده از هگزترا، بخش‌های زیر را کاوش کنید:\nسازماندهی پرونده‌ها پیکربندی مارک‌داون برجسته‌کردن سینتکس LaTeX نمودارها کدهای کوتاه به‌کاراندازی سایت "},"title":"راهنما"},"/docs/guide/_index.ja/":{"data":{"":"Hextraの使い方を学ぶために、以下のセクションを探索してください:\nファイルの整理 設定 Markdown シンタックスハイライト LaTeX ダイアグラム ショートコード サイトのデプロイ "},"title":"ガイド"},"/docs/guide/_index.zh-cn/":{"data":{"":"探索以下部分，了解如何使用 Hextra：\n文件组织 配置 Markdown 语法高亮 LaTeX 图表 短代码 部署站点 "},"title":"指南"},"/docs/guide/configuration.fa/":{"data":{"":"Hugo پیکربندی خود را از hugo.yaml در ریشه سایت Hugo شما می‌خواند. پرونده پیکربندی جایی است که می‌توانید تمام جنبه‌های سایت خود را پیکربندی کنید. پرونده پیکربندی این سایت exampleSite/hugo.yaml را در گیت‌هاب بررسی کنید تا ایده‌ای جامع از تنظیمات موجود و بهترین شیوه‌ها بدست آورید.","سایر-موارد#سایر موارد":"Favicon برای سفارشی کردن favicon برای سایت خود، پرونده‌های آیکون را درون پوشه static قرار دهید تا faviconهای پیش‌فرض در تم جایگزین شود:\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest هر دو پرونده favicon.ico و favicon.svg را در پروژه خود قرار دهید، تا از نمایش صحیح faviconهای سایت خود مطمئن شوید.\nدر حالی که favicon.ico به طور کلی برای مرورگرهای قدیمی‌تر است، favicon.svg توسط مرورگرهای مدرن پشتیبانی می‌شود. faviconfavicon-dark.svg اختیاری را می‌توانید برای یک تجربه سفارشی در حالت تیره اضافه کرد. با خیال راحت از ابزارهایی مانند favicon.io یا favycon برای تولید این آیکون‌ها استفاده کنید.\nپیکربندی تم از تنظیمات theme برای پیکربندی حالت پیش‌فرض تم و دکمه جابه‌جایی استفاده کنید و به بازدیدکنندگان اجازه دهید بین حالت روشن یا تیره جابجا شوند.\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true گزینه‌های theme.default:\nlight - همیشه از حالت روشن استفاده شود dark - همیشه از حالت تیره استفاده شود system - همگام‌سازی با تنظیمات سیستم‌عامل (پیش‌فرض) پارامتر theme.displayToggle به شما این امکان را می‌دهد که یک دکمه جابجایی برای تغییر حالت تم‌ها نمایش دهید. وقتی روی true تنظیم شود، بازدیدکنندگان می‌توانند بین حالت روشن یا تیره جابه‌جا شوند و تنظیمات پیش‌فرض را نادیده بگیرند.\nعرض صفحه عرض صفحه را می‌توان با پارامتر params.page.width در پرونده پیکربندی سفارشی کرد:\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide سه گزینه در دسترس وجود دارد: full، wide و normal. به طور پیش‌فرض، عرض صفحه روی normal تنظیم شده است.\nبه طور مشابه، عرض نوار ناوبری و پاورقی را می‌توان با پارامترهای params.navbar.width و params.footer.width سفارشی کرد.\nفهرست جستجو جستجوی متن کامل توسط FlexSearch پیاده‌سازی شده و به طور پیش‌فرض فعال است. برای سفارشی کردن فهرست جستجو، پارامتر params.search.flexsearch.index را در پرونده پیکربندی تنظیم کنید:\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content گزینه‌های flexsearch.index:\ncontent - محتوای کامل صفحه (پیش‌فرض) summary - خلاصه صفحه، برای جزئیات بیشتر به خلاصه مطالب Hugo مراجعه کنید heading - سرتیترهای سطح ۱ و سطح ۲ title - فقط شامل عنوان صفحه است برای حذف یک صفحه از فهرست جستجو، excludeSearch: true را در قسمت بالای صفحه تنظیم کنید:\ncontent/docs/guide/configuration.md--- title: پیکربندی excludeSearch: true --- گوگل آنالیتیکس برای فعال کردن گوگل آنالیتیکس، پرچم services.googleAnalytics.ID را در hugo.yaml تنظیم کنید:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","ناوبری#ناوبری":"منو منوی سمت چپ بالا در قسمت menu.main در پرونده پیکربندی تعریف شده است:\nhugo.yamlmenu: main: - name: مستندات pageRef: /docs weight: 1 - name: وبلاگ pageRef: /blog weight: 2 - name: درباره ما pageRef: /about weight: 3 - name: جستجو weight: 4 params: type: search - name: گیت‌هاب weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github انواع مختلفی از آیتم‌های منو وجود دارد:\nپیوند به صفحه‌ای در سایت با pageRef - name: مستندات pageRef: /docs پیوند به یک نشانی اینترنتی با url - name: گیت‌هاب url: \"https://github.com\" نوار جستجو با type: search - name: جستجو params: type: search آیکون - name: گیت‌هاب params: icon: github این آیتم‌های منو را می‌توانید با تنظیم پارامتر weight مرتب کنید.\nآرم و عنوان برای تغییر آرم پیش‌فرض، hugo.yaml را ویرایش کنید و مسیر را به پرونده آرم خود در دایرکتوری static اضافه کنید. به صورت اختیاری، می‌توانید پیوندی را که کاربران هنگام کلیک کردن روی آرم شما به آن هدایت می‌شوند، تغییر دهید، همچنین عرض و ارتفاع آرم را به پیکسل تنظیم کنید.\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","نوار-کناری#نوار کناری":"نوار کناری اصلی برای نوار کناری اصلی، به طور خودکار از ساختار دایرکتوری محتوا تولید می‌شود. برای جزئیات بیشتر به صفحه سازماندهی پرونده‌ها مراجعه کنید.\nبرای حذف یک صفحه از نوار کناری سمت راست، پارامترsidebar.exclude را در قسمت بالایی صفحه تنظیم کنید:\ncontent/docs/guide/configuration.md--- title: پیکربندی sidebar: exclude: true --- پیوندهای اضافی پیوندهای اضافی نوار کناری در زیر بخش menu.sidebar در پرونده پیکربندی تعریف شده است:\nhugo.yamlmenu: sidebar: - name: بیشتر params: type: separator weight: 1 - name: \"درباره ما\" pageRef: \"/about\" weight: 2 - name: \"مستندات هیوگو ↖\" url: \"https://gohugo.io/documentation/\" weight: 3 ","نوار-کناری-سمت-چپ#نوار کناری سمت چپ":"فهرست مطالب فهرست مطالب به طور خودکار از سرتیرهای موجود در پرونده محتوا تولید می‌شود. می‌توان آن را با تنظیم toc: false در قسمت بالایی صفحه غیرفعال کرد.\ncontent/docs/guide/configuration.md--- title: پیکربندی toc: false --- پیوند ویرایش صفحه برای پیکربندی پیوند ویرایش صفحه، می‌توانیم پارامتر params.editURL.base را در پرونده پیکربندی تنظیم کنیم:\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\" پیوندهای ویرایش به طور خودکار برای هر صفحه براساس نشانی اینترنتی ارائه شده به عنوان دایرکتوری ریشه ایجاد می‌شود. اگر می‌خواهید پیوند ویرایش را برای یک صفحه خاص تنظیم کنید، می‌توانید پارامتر editURL را در قسمت بالای صفحه تنظیم کنید:\ncontent/docs/guide/configuration.md--- title: پیکربندی editURL: \"https://example.com/edit/this/page\" --- ","پاورقی#پاورقی":"کپی‌رایت برای تغییر متن کپی‌رایت نمایش داده شده در پاورقی وب‌سایت خود، باید پرونده‌ای به نام i18n/fa.yaml ایجاد کنید. در این پرونده متن کپی‌رایت جدید خود را مطابق شکل زیر مشخص کنید:\ni18n/fa.yamlcopyright: \"© ۲۰۲۴ متن شما در اینجا\" برای مرجع شما، یک مثال i18n/en.yaml را می‌توانید در مخزن گیت‌هاب پیدا کنید. علاوه بر این، می‌توانید از فرمت مارک‌داون در متن کپی‌رایت استفاده کنید."},"title":"پیکربندی"},"/docs/guide/configuration.ja/":{"data":{"":"Hugoは、Hugoサイトのルートにあるhugo.yamlから設定を読み取ります。 この設定ファイルでは、サイトのすべての側面を設定できます。 利用可能な設定とベストプラクティスの包括的な理解を得るために、GitHub上のこのサイトの設定ファイルexampleSite/hugo.yamlをチェックしてください。","その他#その他":"ファビコン サイトのファビコンをカスタマイズするには、staticフォルダ下にアイコンファイルを配置して、テーマのデフォルトのファビコンを上書きします：\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest プロジェクトにfavicon.ico、favicon.svg、favicon-dark.svgファイルを含めて、サイトのファビコンが正しく表示されるようにします。\nfavicon.icoは一般的に古いブラウザ用ですが、favicon.svgとfavicon-dark.svgは現代のブラウザでサポートされています。 favicon.ioやfavyconなどのツールを使用して、このようなアイコンを生成できます。\nテーマ設定 theme設定を使用して、デフォルトのテーマモードとトグルボタンを設定し、訪問者がライトモードとダークモードを切り替えられるようにします。\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true theme.defaultのオプション：\nlight - 常にライトモードを使用 dark - 常にダークモードを使用 system - オペレーティングシステムの設定と同期（デフォルト） theme.displayToggleパラメータを使用して、テーマを変更するためのトグルボタンを表示できます。 trueに設定すると、訪問者はデフォルト設定を上書きしてライトモードとダークモードを切り替えることができます。\nページ幅 ページの幅は、設定ファイルのparams.page.widthパラメータでカスタマイズできます：\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide 利用可能なオプションはfull、wide、normalです。デフォルトでは、ページ幅はnormalに設定されています。\n同様に、ナビゲーションバーとフッターの幅は、params.navbar.widthとparams.footer.widthパラメータでカスタマイズできます。\n検索インデックス FlexSearchによる全文検索はデフォルトで有効です。 検索インデックスをカスタマイズするには、設定ファイルでparams.search.flexsearch.indexパラメータを設定します：\nhugo.yamlparams: # 検索 search: enable: true type: flexsearch flexsearch: # ページをインデックスする方法: content | summary | heading | title index: content flexsearch.indexのオプション：\ncontent - ページの全内容（デフォルト） summary - ページの要約、詳細はHugoコンテンツ要約を参照 heading - レベル1とレベル2の見出し title - ページタイトルのみを含める 検索トークン化をカスタマイズするには、設定ファイルでparams.search.flexsearch.tokenizeパラメータを設定します：\nhugo.yamlparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward flexsearch.tokenizeのオプション：\nstrict - 単語全体をインデックス forward - 前方方向に単語を増分的にインデックス reverse - 両方向に単語を増分的にインデックス full - すべての可能な組み合わせをインデックス 検索インデックスからページを除外するには、ページのフロントマターでexcludeSearch: trueを設定します：\ncontent/docs/guide/configuration.md--- title: 設定 excludeSearch: true --- Googleアナリティクス Googleアナリティクスを有効にするには、hugo.yamlでservices.googleAnalytics.IDフラグを設定します：\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","サイドバー#サイドバー":"メインサイドバー メインサイドバーは、コンテンツディレクトリの構造から自動的に生成されます。 詳細については、ファイルの整理ページを参照してください。\n左サイドバーから単一のページを除外するには、ページのフロントマターでsidebar.excludeパラメータを設定します：\ncontent/docs/guide/configuration.md--- title: 設定 sidebar: exclude: true --- 追加リンク サイドバーの追加リンクは、設定ファイルのmenu.sidebarセクションで定義されます：\nhugo.yamlmenu: sidebar: - name: その他 params: type: separator weight: 1 - name: \"について\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","ナビゲーション#ナビゲーション":"メニュー 右上のメニューは、設定ファイルのmenu.mainセクションで定義されます：\nhugo.yamlmenu: main: - name: ドキュメント pageRef: /docs weight: 1 - name: ブログ pageRef: /blog weight: 2 - name: について pageRef: /about weight: 3 - name: 検索 weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github メニュー項目にはさまざまなタイプがあります：\npageRefを使用してサイト内のページにリンク - name: ドキュメント pageRef: /docs urlを使用して外部URLにリンク - name: GitHub url: \"https://github.com\" type: searchを使用して検索バーを表示 - name: 検索 params: type: search アイコン - name: GitHub params: icon: github これらのメニュー項目は、weightパラメータを設定して並べ替えることができます。\nロゴとタイトル デフォルトのロゴを変更するには、hugo.yamlを編集し、staticディレクトリ下のロゴファイルへのパスを追加します。 オプションで、ロゴをクリックしたときにユーザーがリダイレクトされるリンクや、ロゴの幅と高さをピクセル単位で設定できます。\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","フッター#フッター":"著作権 ウェブサイトのフッターに表示される著作権テキストを変更するには、i18n/en.yamlという名前のファイルを作成します。 このファイルに、以下のように新しい著作権テキストを指定します：\ni18n/en.yamlcopyright: \"© 2024 YOUR TEXT HERE\" 参考として、GitHubリポジトリにi18n/en.yamlファイルの例があります。また、著作権テキストにMarkdown形式を使用することもできます。","右サイドバー#右サイドバー":"目次 目次は、コンテンツファイルの見出しから自動的に生成されます。ページのフロントマターでtoc: falseを設定することで無効にできます。\ncontent/docs/guide/configuration.md--- title: 設定 toc: false --- ページ編集リンク ページ編集リンクを設定するには、設定ファイルでparams.editURL.baseパラメータを設定します：\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\" 提供されたURLをルートディレクトリとして、各ページの編集リンクが自動的に生成されます。 特定のページの編集リンクを設定したい場合は、ページのフロントマターでeditURLパラメータを設定します：\ncontent/docs/guide/configuration.md--- title: 設定 editURL: \"https://example.com/edit/this/page\" --- "},"title":"設定"},"/docs/guide/configuration.zh-cn/":{"data":{"":"Hugo 从您 Hugo 站点根目录下的 hugo.yaml 文件中读取配置。 配置文件是您可以配置站点所有方面的地方。 查看此站点的配置文件 exampleSite/hugo.yaml 在 GitHub 上，以全面了解可用的设置和最佳实践。","侧边栏#侧边栏":"主侧边栏 主侧边栏是根据内容目录的结构自动生成的。 有关更多详细信息，请参阅 组织文件 页面。\n要从左侧边栏中排除单个页面，请在页面的 front matter 中设置 sidebar.exclude 参数：\ncontent/docs/guide/configuration.md--- title: 配置 sidebar: exclude: true --- 额外链接 侧边栏的额外链接在配置文件的 menu.sidebar 部分中定义：\nhugo.yamlmenu: sidebar: - name: 更多 params: type: separator weight: 1 - name: \"关于\" pageRef: \"/about\" weight: 2 - name: \"Hugo 文档 ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","其他#其他":"网站图标 要为您的站点自定义 网站图标，请将图标文件放在 static 文件夹下，以覆盖 主题的默认网站图标：\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest 在您的项目中包含 favicon.ico、favicon.svg 和 favicon-dark.svg 文件，以确保您的站点图标正确显示。\n虽然 favicon.ico 通常用于旧版浏览器，但 favicon.svg 和 favicon-dark.svg 受现代浏览器支持。 使用 favicon.io 或 favycon 等工具生成此类图标。\n主题配置 使用 theme 设置来配置默认主题模式和切换按钮，允许访问者在浅色或深色模式之间切换。\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true theme.default 的选项：\nlight - 始终使用浅色模式 dark - 始终使用深色模式 system - 与操作系统设置同步（默认） theme.displayToggle 参数允许您显示一个切换按钮以更改主题。 当设置为 true 时，访问者可以在浅色或深色模式之间切换，覆盖默认设置。\n页面宽度 页面的宽度可以通过配置文件中的 params.page.width 参数进行自定义：\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide 有三个可用选项：full、wide 和 normal。默认情况下，页面宽度设置为 normal。\n同样，导航栏和页脚的宽度可以通过 params.navbar.width 和 params.footer.width 参数进行自定义。\n搜索索引 默认启用由 FlexSearch 提供的全文搜索。 要自定义搜索索引，请在配置文件中设置 params.search.flexsearch.index 参数：\nhugo.yamlparams: # 搜索 search: enable: true type: flexsearch flexsearch: # 按以下内容索引页面：content | summary | heading | title index: content flexsearch.index 的选项：\ncontent - 页面的完整内容（默认） summary - 页面的摘要，请参阅 Hugo 内容摘要 了解更多详细信息 heading - 一级和二级标题 title - 仅包括页面标题 要自定义搜索分词，请在配置文件中设置 params.search.flexsearch.tokenize 参数：\nhugo.yamlparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward flexsearch.tokenize 的选项：\nstrict - 索引整个单词 forward - 向前方向逐步索引单词 reverse - 双向逐步索引单词 full - 索引所有可能的组合 要从搜索索引中排除页面，请在页面的 front matter 中设置 excludeSearch: true：\ncontent/docs/guide/configuration.md--- title: 配置 excludeSearch: true --- Google Analytics 要启用 Google Analytics，请在 hugo.yaml 中设置 services.googleAnalytics.ID 标志：\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","右侧边栏#右侧边栏":"目录 目录是根据内容文件中的标题自动生成的。可以通过在页面的 front matter 中设置 toc: false 来禁用它。\ncontent/docs/guide/configuration.md--- title: 配置 toc: false --- 页面编辑链接 要配置页面编辑链接，我们可以在配置文件中设置 params.editURL.base 参数：\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\" 编辑链接将根据提供的 URL 作为根目录自动为每个页面生成。 如果要为特定页面设置编辑链接，可以在页面的 front matter 中设置 editURL 参数：\ncontent/docs/guide/configuration.md--- title: 配置 editURL: \"https://example.com/edit/this/page\" --- ","导航#导航":"菜单 右上角的菜单在配置文件的 menu.main 部分中定义：\nhugo.yamlmenu: main: - name: 文档 pageRef: /docs weight: 1 - name: 博客 pageRef: /blog weight: 2 - name: 关于 pageRef: /about weight: 3 - name: 搜索 weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github 有不同类型的菜单项：\n使用 pageRef 链接到站点内的页面 - name: 文档 pageRef: /docs 使用 url 链接到外部 URL - name: GitHub url: \"https://github.com\" 使用 type: search 的搜索栏 - name: 搜索 params: type: search 图标 - name: GitHub params: icon: github 这些菜单项可以通过设置 weight 参数进行排序。\n徽标和标题 要修改默认徽标，编辑 hugo.yaml 并在 static 目录下添加徽标文件的路径。 您还可以更改用户点击徽标时重定向的链接，以及设置徽标的宽度和高度（以像素为单位）。\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","页脚#页脚":"版权 要修改网站页脚中显示的版权文本，您需要创建一个名为 i18n/en.yaml 的文件。 在此文件中，指定您的新版权文本，如下所示：\ni18n/en.yamlcopyright: \"© 2024 您的文本\" 作为参考，可以在 GitHub 仓库中找到示例 i18n/en.yaml 文件。此外，您可以在版权文本中使用 Markdown 格式。"},"title":"配置"},"/docs/guide/configuration/":{"data":{"":"Hugo reads its configuration from hugo.yaml in the root of your Hugo site. The config file is where you can configure all aspects of your site. Check out the config file for this site exampleSite/hugo.yaml on GitHub to get a comprehensive idea of available settings and best practices.","footer#Footer":"Copyright To modify the copyright text displayed in your website’s footer, you’ll need to create a file named i18n/en.yaml. In this file, specify your new copyright text as shown below:\ni18n/en.yamlcopyright: \"© 2024 YOUR TEXT HERE\" For your reference, an example i18n/en.yaml file can be found in the GitHub repository. Additionally, you could use Markdown format in the copyright text.","navigation#Navigation":"Menu Top right menu is defined under the menu.main section in the config file:\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github There are different types of menu items:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github These menu items can be sorted by setting the weight parameter.\nLogo and Title To modify the default logo, edit hugo.yaml and add the path to your logo file under static directory. Optionally, you can change the link that users are redirected to when clicking on your logo, as well as set the width \u0026 height of the logo in pixels.\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","others#Others":"Favicon To customize the favicon for your site, place icon files under the static folder to override the default favicons from the theme:\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest Include favicon.ico, favicon.svg and favicon-dark.svg files in your project to ensure your site’s favicons display correctly.\nWhile favicon.ico is generally for older browsers, favicon.svg and favicon-dark.svg are supported by modern browsers. Use tools like favicon.io or favycon to generate such icons.\nTheme Configuration Use the theme setting to configure the default theme mode and toggle button, allowing visitors to switch between light or dark mode.\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true Options for theme.default:\nlight - always use light mode dark - always use dark mode system - sync with the operating system setting (default) The theme.displayToggle parameter allows you to display a toggle button for changing themes. When set to true, visitors can switch between light or dark mode, overriding the default setting.\nPage Last Modification The date of the page’s last modification can be displayed by enabling the params.displayUpdatedDate flag. To use Git commit date as the source, enable also the enableGitInfo flag.\nTo customize the date format, set the params.dateFormat parameter. Its layout matches Hugo’s time.Format.\nhugo.yaml# Parse Git commit enableGitInfo: true params: # Display the last modification date displayUpdatedDate: true dateFormat: \"January 2, 2006\" Page Width The width of the page can be customized by the params.page.width parameter in the config file:\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide There are three available options: full, wide, and normal. By default, the page width is set to normal.\nSimilarly, the width of the navbar and footer can be customized by the params.navbar.width and params.footer.width parameters.\nSearch Index Full-text search powered by FlexSearch is enabled by default. To customize the search index, set the params.search.flexsearch.index parameter in the config file:\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content Options for flexsearch.index:\ncontent - full content of the page (default) summary - summary of the page, see Hugo Content Summaries for more details heading - level 1 and level 2 headings title - only include the page title To customize the search tokenize, set the params.search.flexsearch.tokenize parameter in the config file:\nhugo.yamlparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward Options for flexsearch.tokenize:\nstrict - index whole words forward - incrementally index words in forward direction reverse - incrementally index words in both directions full - index every possible combination To exclude a page from the search index, set the excludeSearch: true in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration excludeSearch: true --- Google Analytics To enable Google Analytics, set services.googleAnalytics.ID flag in hugo.yaml:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","right-sidebar#Right Sidebar":"Table of Contents Table of contents is automatically generated from the headings in the content file. It can be disabled by setting toc: false in the front matter of the page.\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- Page Edit Link To configure the page edit link, we can set the params.editURL.base parameter in the config file:\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\" The edit links will be automatically generated for each page based on the provided url as root directory. If you want to set edit link for a specific page, you can set the editURL parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration editURL: \"https://example.com/edit/this/page\" --- ","sidebar#Sidebar":"Main Sidebar For the main sidebar, it is automatically generated from the structure of the content directory. See the Organize Files page for more details.\nTo exclude a single page from the left sidebar, set the sidebar.exclude parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration sidebar: exclude: true --- Extra Links Sidebar extra links are defined under the menu.sidebar section in the config file:\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 "},"title":"Configuration"},"/docs/guide/deploy-site.fa/":{"data":{"":"Hugo وب‌سایت‌های استاتیک را ایجاد می‌کند و امکان گزینه‌های میزبانی انعطاف‌پذیر را فراهم می‌کند. این صفحه راهنماهایی برای به‌کاراندازی سایت هگزترا شما در پلتفرم‌های مختلف ارائه می‌کند.","netlify#Netlify":" کد خود را به مخزن Git خود (گیت‌هاب، گیت‌لب و غیره) ارسال کنید. وارد کردن پروژه به Netlify اگر از [hextra-starter-template][hextra-starter-template] استفاده نمی‌کنید، موارد زیر را به صورت دستی پیکربندی کنید: دستور Build را روی hugo --gc --minify پیکربندی کنید دایرکتوری Publish را برای public مشخص کنید HUGO_VERSION متغیر محیط استقرار را اضافه کنید و روی 0.119.0 تنظیم کنید استقرار! برای جزئیات بیشتر Hugo را در Netlify بررسی کنید.","vercel#Vercel":" کد خود را به مخزن Git خود (گیت‌هاب، گیت‌لب و غیره) ارسال کنید. به پیشخوان Vercel بروید و پروژه Hugo خود را وارد کنید پروژه را پیکربندی کنید، Hugo را به‌ عنوان چارچوب Preset انتخاب کنید دستور Build و Install را لغو کنید: دستور Build را روی hugo --gc --minify تنظیم کنید دستور Install را روی yum install golang تنظیم کنید ","کلودفلر-pages#کلودفلر Pages":" کد منبع سایت خود را در یک مخزن Git (به عنوان مثال گیت‌هاب) قرار دهید وارد پیشخوان کلودفلر شوید و حساب خود را انتخاب کنید در صفحه اصلی حساب‌کاربری، Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git را انتخاب کنید مخزن را انتخاب کنید و در بخش Set up builds and Deployments اطلاعات زیر را وارد کنید: Configuration Value Production branch main Build command hugo --gc --minify Build directory public برای جزئیات بیشتر، بررسی کنید:\nیک سایت هیوگو راه‌اندازی کنید.. پشتیبانی زبان و ابزار.. ","گیتهاب-pages#گیت‌هاب Pages":"گیت‌هاب Pages روشی توصیه شده برای به‌کاراندازی و میزبانی وب‌سایت شما به صورت رایگان است.\nاگر سایت را با استفاده از hextra-starter-template راه‌اندازی سریع پیاده‌سازی می‌کنید، گردش کار گیت‌هاب Actions را به صورت خارج از جعبه ارائه کرده‌ایم که به‌کاراندازی خودکار در گیت‌هاب Pages به شما کمک می‌کند.\nپیکربندی گیت‌هاب Actions در زیر یک پیکربندی مثال از hextra-starter-template آورده شده است:\n.github/workflows/pages.yaml# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\"main\"] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.117.0 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Go uses: actions/setup-go@v4 with: go-version: '1.21' - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.117.0' extended: true - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v2 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v2 در تنظیمات مخزن خود، Pages \u003e Build and deployment \u003e Source را روی GitHub Actions تنظیم کنید: به‌طور پیش‌فرض، گردش کار گیت‌هاب Actions بالا .github/workflows/pages.yaml فرض می‌کند که سایت در حال به‌کاراندازی در https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/ است.\nاگر در حال استفاده از https://\u003cUSERNAME\u003e.github.io/ هستید، سپس --baseURL را تغییر دهید:\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" اگر می‌خواهید روی دامنه شخصی خود استقرار پیدا کند، لطفا مقدار --baseURL را بر این اساس تغییر دهید."},"title":"به‌کاراندازی سایت"},"/docs/guide/deploy-site.ja/":{"data":{"":"Hugoは静的サイトを生成するため、柔軟なホスティングオプションが可能です。 このページでは、Hextraサイトをさまざまなプラットフォームにデプロイするためのガイドを提供します。","cloudflare-pages#Cloudflare Pages":" サイトのソースコードをGitリポジトリ（例：GitHub）に配置します。 Cloudflareダッシュボードにログインし、アカウントを選択します。 アカウントホームで、Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git を選択します。 リポジトリを選択し、Set up builds and deployments セクションで以下の情報を提供します： 設定 値 本番ブランチ main ビルドコマンド hugo --gc --minify ビルドディレクトリ public 詳細については、以下を確認してください：\nHugoサイトのデプロイ。 言語サポートとツール。 ","github-pages#GitHub Pages":"GitHub Pagesは、無料でウェブサイトをデプロイおよびホストするための推奨方法です。\nhextra-starter-templateを使用してサイトをブートストラップした場合、GitHub Pagesへの自動デプロイを支援するGitHub Actionsワークフローがすぐに利用可能です。\nGitHub Actionsの設定 以下は、hextra-starter-templateからの設定例です：\n.github/workflows/pages.yaml# HugoサイトをGitHub Pagesにデプロイするためのサンプルワークフロー name: Deploy Hugo site to Pages on: # デフォルトブランチへのプッシュ時に実行 push: branches: [\"main\"] # Actionsタブから手動でこのワークフローを実行可能 workflow_dispatch: # GITHUB_TOKENの権限を設定してGitHub Pagesへのデプロイを許可 permissions: contents: read pages: write id-token: write # 同時実行を1つに制限し、進行中の実行と最新のキューイングされた実行の間の実行をスキップ。 # ただし、進行中の実行はキャンセルしないでください。これらの本番デプロイを完了させたいためです。 concurrency: group: \"pages\" cancel-in-progress: false # デフォルトはbash defaults: run: shell: bash jobs: # ビルドジョブ build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.145.0 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # .GitInfoと.Lastmodのためにすべての履歴を取得 submodules: recursive - name: Setup Go uses: actions/setup-go@v5 with: go-version: '1.22' - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Setup Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Build with Hugo env: # Hugoモジュールとの最大限の互換性のために HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # デプロイジョブ deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 リポジトリ設定で、Pages \u003e Build and deployment \u003e Source を GitHub Actions に設定します： デフォルトでは、上記のGitHub Actionsワークフロー .github/workflows/pages.yaml は、サイトが https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/ にデプロイされることを前提としています。\nhttps://\u003cUSERNAME\u003e.github.io/ にデプロイする場合は、--baseURL を変更します：\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" 独自のドメインにデプロイする場合は、--baseURL の値を適宜変更してください。","netlify#Netlify":" コードをGitリポジトリ（GitHub、GitLabなど）にプッシュします。 プロジェクトをインポートしてNetlifyに追加します。 [hextra-starter-template][hextra-starter-template]を使用していない場合、以下の設定を手動で行います： ビルドコマンドを hugo --gc --minify に設定します。 公開ディレクトリを public に指定します。 環境変数 HUGO_VERSION を追加し、0.145.0 に設定するか、netlify.toml ファイルに設定します。 デプロイします！ 詳細については、NetlifyでのHugoを確認してください。","vercel#Vercel":" コードをGitリポジトリ（GitHub、GitLabなど）にプッシュします。 Vercelダッシュボードに移動し、Hugoプロジェクトをインポートします。 プロジェクトを設定し、フレームワークプリセットとしてHugoを選択します。 ビルドコマンドとインストールコマンドを上書きします： ビルドコマンドを hugo --gc --minify に設定します。 インストールコマンドを yum install golang に設定します。 "},"title":"サイトのデプロイ"},"/docs/guide/deploy-site.zh-cn/":{"data":{"":"Hugo 生成静态网站，允许灵活的托管选项。 本页提供了在各种平台上部署 Hextra 站点的指南。","cloudflare-pages#Cloudflare Pages":" 将您的站点源代码放入 Git 仓库（例如 GitHub） 登录 Cloudflare 仪表板 并选择您的账户 在账户主页中，选择 Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git 选择仓库，并在 Set up builds and deployments 部分提供以下信息： 配置项 值 生产分支 main 构建命令 hugo --gc --minify 构建目录 public 更多详情，请查看：\n部署 Hugo 站点。 语言支持和工具。 ","github-pages#GitHub Pages":"GitHub Pages 是推荐的方式，可以免费部署和托管您的网站。\n如果您使用 hextra-starter-template 引导站点，它已经提供了开箱即用的 GitHub Actions 工作流，帮助自动部署到 GitHub Pages。\nGitHub Actions 配置 以下是 hextra-starter-template 的示例配置：\n.github/workflows/pages.yaml# 用于构建和部署 Hugo 站点到 GitHub Pages 的示例工作流 name: 部署 Hugo 站点到 Pages on: # 在推送到默认分支时运行 push: branches: [\"main\"] # 允许您从 Actions 选项卡手动运行此工作流 workflow_dispatch: # 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages permissions: contents: read pages: write id-token: write # 只允许一个并发部署，跳过在运行中和最新排队之间的运行。 # 但是，不要取消正在运行的运行，因为我们希望这些生产部署能够完成。 concurrency: group: \"pages\" cancel-in-progress: false # 默认使用 bash defaults: run: shell: bash jobs: # 构建任务 build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.145.0 steps: - name: 检出 uses: actions/checkout@v4 with: fetch-depth: 0 # 获取所有历史记录以支持 .GitInfo 和 .Lastmod submodules: recursive - name: 设置 Go uses: actions/setup-go@v5 with: go-version: '1.22' - name: 设置 Pages id: pages uses: actions/configure-pages@v4 - name: 设置 Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: 使用 Hugo 构建 env: # 为了最大程度地兼容 Hugo 模块 HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: 上传工件 uses: actions/upload-pages-artifact@v3 with: path: ./public # 部署任务 deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: 部署到 GitHub Pages id: deployment uses: actions/deploy-pages@v4 在您的仓库设置中，将 Pages \u003e Build and deployment \u003e Source 设置为 GitHub Actions： 默认情况下，上述 GitHub Actions 工作流 .github/workflows/pages.yaml 假设站点部署到 https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/。\n如果您部署到 https://\u003cUSERNAME\u003e.github.io/，请修改 --baseURL：\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" 如果您部署到自己的域名，请相应地更改 --baseURL 值。","netlify#Netlify":" 将代码推送到您的 Git 仓库（GitHub、GitLab 等） 导入项目 到 Netlify 如果您没有使用 [hextra-starter-template][hextra-starter-template]，请手动配置以下内容： 将构建命令配置为 hugo --gc --minify 指定发布目录为 public 添加环境变量 HUGO_VERSION 并设置为 0.145.0，或者将其设置在 netlify.toml 文件中 部署！ 查看 Netlify 上的 Hugo 了解更多详情。","vercel#Vercel":" 将代码推送到您的 Git 仓库（GitHub、GitLab 等） 前往 Vercel 仪表板 并导入您的 Hugo 项目 配置项目，选择 Hugo 作为框架预设 覆盖构建命令和安装命令： 将构建命令设置为 hugo --gc --minify 将安装命令设置为 yum install golang "},"title":"部署站点"},"/docs/guide/deploy-site/":{"data":{"":"Hugo generates static websites, allowing for flexible hosting options. This page provides guides for deploying your Hextra site on various platforms.","cloudflare-pages#Cloudflare Pages":" Put your site source code in a Git repository (e.g. GitHub) Log in to the Cloudflare dashboard and select your account In Account Home, select Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git Select the repository, and in the Set up builds and deployments section, provide the following information: Configuration Value Production branch main Build command hugo --gc --minify Build directory public For more details, check out:\nDeploy a Hugo site. Language support and tools. ","github-pages#GitHub Pages":"GitHub Pages is the recommended way to deploy and host your website for free.\nIf you bootstrap the site using hextra-starter-template, it has provided GitHub Actions workflow out-of-the-box that helps automatically deploy to GitHub Pages.\nGitHub Actions Configuration Below is an example configuration from hextra-starter-template:\n.github/workflows/pages.yaml# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\"main\"] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.145.0 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # fetch all history for .GitInfo and .Lastmod submodules: recursive - name: Setup Go uses: actions/setup-go@v5 with: go-version: '1.22' - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Setup Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 In your repository settings, set the Pages \u003e Build and deployment \u003e Source to GitHub Actions: By default, the above GitHub Actions workflow .github/workflows/pages.yaml assumes that the site is deploying to https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/.\nIf you are deploying to https://\u003cUSERNAME\u003e.github.io/ then modify the --baseURL:\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" If you are deploying to your own domain, please change the --baseURL value accordingly.","netlify#Netlify":" Push your code to your Git repository (GitHub, GitLab, etc.) Import the project to Netlify If you are not using [hextra-starter-template][hextra-starter-template], configure the following manually: Configure the Build command to hugo --gc --minify Specify the Publish directory to public Add Environment variable HUGO_VERSION and set to 0.145.0, or alternatively, set it in netlify.toml file Deploy! Check Hugo on Netlify for more details.","vercel#Vercel":" Push your code to your Git repository (GitHub, GitLab, etc.) Go to Vercel Dashboard and import your Hugo project Configure the project, select Hugo as Framework Preset Override the Build Command and Install command: Set Build Command to hugo --gc --minify Set Install Command to yum install golang "},"title":"Deploy Site"},"/docs/guide/diagrams.fa/":{"data":{"":"در حال حاضر، هگزترا از Mermaid برای نمودارها پشتیبانی می‌کند.","mermaid#Mermaid":"Mermaid یک ابزار نمودار و نمودار مبتنی بر جاوااسکریپت است که تعاریف متنی الهام گرفته از مارک‌داون را دریافت می‌کند و نمودارها را به صورت پویا در مرورگر ایجاد می‌کند. به عنوان مثال، Mermaid می‌تواند نمودارهای فلوچارت، نمودارهای توالی، نمودارهای دایره‌ای و موارد دیگر را رندر کند.\nاستفاده از Mermaid در هگزترا به سادگی نوشتن یک بلوک کد با مجموعه زبان mermaid است:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` به صورت زیر رندر خواهد شد:\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; نمودار توالی:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! برای اطلاعات بیشتر، لطفا به مستندات Mermaid مراجعه کنید."},"title":"نمودارها"},"/docs/guide/diagrams.ja/":{"data":{"":"現在、HextraはダイアグラムのためにMermaidをサポートしています。","mermaid#Mermaid":"Mermaidは、JavaScriptベースのダイアグラムおよびチャート作成ツールで、Markdownにインスパイアされたテキスト定義を取り込み、ブラウザ内でダイナミックにダイアグラムを作成します。例えば、Mermaidはフローチャート、シーケンス図、円グラフなどをレンダリングできます。\nHextraでMermaidを使用するのは、言語をmermaidに設定したコードブロックを書くのと同じくらい簡単です:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` これは次のようにレンダリングされます:\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; シーケンス図:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: こんにちはJohn、元気ですか？ loop 健康チェック John-\u003e\u003eJohn: 心気症と戦う end Note right of John: 理性的な思考 \u003cbr/\u003eが勝つ！ John--\u003e\u003eAlice: 元気です！ John-\u003e\u003eBob: あなたはどうですか？ Bob--\u003e\u003eJohn: とても元気です！ 詳細については、Mermaidドキュメントを参照してください。"},"title":"ダイアグラム"},"/docs/guide/diagrams.zh-cn/":{"data":{"":"目前，Hextra 支持使用 Mermaid 来绘制图表。","mermaid#Mermaid":"Mermaid 是一个基于 JavaScript 的图表工具，它通过类似 Markdown 的文本定义，在浏览器中动态生成图表。例如，Mermaid 可以渲染流程图、序列图、饼图等。\n在 Hextra 中使用 Mermaid 非常简单，只需编写一个语言设置为 mermaid 的代码块：\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` 将会渲染为：\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; 序列图示例：\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: 你好 John，最近怎么样？ loop 健康检查 John-\u003e\u003eJohn: 与疑病症作斗争 end Note right of John: 理性思考 \u003cbr/\u003e占据上风！ John--\u003e\u003eAlice: 很好！ John-\u003e\u003eBob: 你怎么样？ Bob--\u003e\u003eJohn: 非常好！ 更多信息，请参考 Mermaid 文档。"},"title":"图表"},"/docs/guide/diagrams/":{"data":{"":"Currently, Hextra supports Mermaid for diagrams.","mermaid#Mermaid":"Mermaid is a JavaScript based diagramming and charting tool that takes Markdown-inspired text definitions and creates diagrams dynamically in the browser. For example, Mermaid can render flow charts, sequence diagrams, pie charts and more.\nUsing Mermaid in Hextra is as simple as writing a code block with language set mermaid:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` will be rendered as:\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; Sequence diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! For more information, please refer to Mermaid Documentation."},"title":"Diagrams"},"/docs/guide/latex.fa/":{"data":{"":"KaTeX\\KaTeXKATE​X برای رندر کردن عبارت‌های ریاضی LaTeX استفاده می‌شود. می‌توان آن را در هر صفحه با تنظیم math روی true در قسمت بالای صفحه فعال کرد.\nMarkdown--- title: \"صفحه من با LaTeX\" math: true --- وقتی فعال باشد، اسکریپت‌ها، شیوه‌نامه‌ها و فونت‌های KaTeX به طور خودکار در سایت شما قرار می‌گیرند. می‌توانید از عبارت‌های ریاضی LaTeX در محتوای مارک‌داون خود استفاده کنید.","توابع-پشتیبانی-شده#توابع پشتیبانی شده":"برای مشاهده فهرست توابع پشتیبانی شده، به توابع پشتیبانی شده KaTeX مراجعه کنید.","شیمی#شیمی":"عبارت‌های شیمی از طریق افزونه mhchem پشتیبانی می‌شوند.\nدرون‌خطی: HX2O\\ce{H2O}HX2​O آب است.\nپاراگراف جداگانه:\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ HgX2+→IX−HgIX2→IX−[HgXIIIX4]X2−\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}HgX2+IX−​HgIX2​IX−​[HgXIIIX4​]X2−","مثال#مثال":"هر دو عبارت‌های ریاضی درون‌خطی و پاراگراف جداگانه LaTeX در محتوای مارک‌داون پشتیبانی می‌شوند.\nدرون‌خطی page.mdاین \\(\\sigma(z) = \\frac{1}{1 + e^{-z}}\\) درون‌خطی است. این σ(z)=11+e−z\\sigma(z) = \\frac{1}{1 + e^{-z}}σ(z)=1+e−z1​ درون‌خطی است.\nپاراگراف جداگانه page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ به صورت زیر رندر خواهد شد:\nF(ω)=∫−∞∞f(t)e−jωt dtF(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dtF(ω)=∫−∞∞​f(t)e−jωtdt"},"title":"LaTeX"},"/docs/guide/latex.ja/":{"data":{"":"KaTeX\\KaTeXKATE​X は LaTeX の数式をレンダリングするために使用されます。ページのフロントマターで math を true に設定することで、ページごとに有効にすることができます。\npage.md--- title: \"LaTeX を使用した私のページ\" math: true --- 有効にすると、KaTeX のスクリプト、スタイルシート、フォントが自動的にサイトに含まれます。Markdown コンテンツ内で LaTeX 数式を使用できます。","サポートされている関数#サポートされている関数":"サポートされている関数の一覧については、KaTeX サポートされている関数 を参照してください。","例#例":"Markdown コンテンツ内で、インラインおよび別段落の LaTeX 数式がサポートされています。\nインライン page.mdこれは \\(\\sigma(z) = \\frac{1}{1 + e^{-z}}\\) インラインです。 これは σ(z)=11+e−z\\sigma(z) = \\frac{1}{1 + e^{-z}}σ(z)=1+e−z1​ インラインです。\n別段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 次のようにレンダリングされます:\nF(ω)=∫−∞∞f(t)e−jωt dtF(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dtF(ω)=∫−∞∞​f(t)e−jωtdt Important\nHugo 設定ファイルで パススルー拡張機能 を有効にして設定してください。これにより、複雑な式のレンダリング問題を回避するために、デリミタ内の生のコンテンツが保持されます。\nhugo.yamlmarkup: goldmark: extensions: passthrough: delimiters: block: [['\\[', '\\]'], ['$$', '$$']] inline: [['\\(', '\\)']] enable: true 例えば、aligned 環境を使用する場合:\npage.md$$ \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} $$ 次のようにレンダリングされます:\n∇⋅E=ρε0∇⋅B=0∇×E=−∂B∂t∇×B=μ0(J+ε0∂E∂t) \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} ∇⋅E∇⋅B∇×E∇×B​=ε0​ρ​=0=−∂t∂B​=μ0​(J+ε0​∂t∂E​)​","化学#化学":"化学式は mhchem 拡張機能を介してサポートされています。\nインライン: HX2O\\ce{H2O}HX2​O は水です。\n別段落:\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ HgX2+→IX−HgIX2→IX−[HgXIIIX4]X2−\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}HgX2+IX−​HgIX2​IX−​[HgXIIIX4​]X2−"},"title":"LaTeX"},"/docs/guide/latex.zh-cn/":{"data":{"":"KaTeX\\KaTeXKATE​X 用于渲染 LaTeX 数学表达式。可以通过在页面前置设置中将 math 设置为 true 来启用它。\npage.md--- title: \"我的页面包含 LaTeX\" math: true --- 启用后，KaTeX 的脚本、样式表和字体将自动包含在您的站点中。您可以在 Markdown 内容中开始使用 LaTeX 数学表达式。","化学#化学":"通过 mhchem 扩展支持化学表达式。\n内联：HX2O\\ce{H2O}HX2​O 是水。\n独立段落：\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ HgX2+→IX−HgIX2→IX−[HgXIIIX4]X2−\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}HgX2+IX−​HgIX2​IX−​[HgXIIIX4​]X2−","支持的函数#支持的函数":"有关支持的函数列表，请参阅 KaTeX 支持的函数。","示例#示例":"Markdown 内容中支持内联和独立段落的 LaTeX 数学表达式。\n内联 page.md这个 \\(\\sigma(z) = \\frac{1}{1 + e^{-z}}\\) 是内联的。 这个 σ(z)=11+e−z\\sigma(z) = \\frac{1}{1 + e^{-z}}σ(z)=1+e−z1​ 是内联的。\n独立段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 将渲染为：\nF(ω)=∫−∞∞f(t)e−jωt dtF(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dtF(ω)=∫−∞∞​f(t)e−jωtdt Important\n请在 Hugo 配置文件中启用并配置 passthrough 扩展。它保留分隔符内的原始内容，以避免复杂表达式的渲染问题。\nhugo.yamlmarkup: goldmark: extensions: passthrough: delimiters: block: [['\\[', '\\]'], ['$$', '$$']] inline: [['\\(', '\\)']] enable: true 例如，使用对齐环境：\npage.md$$ \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} $$ 将渲染为：\n∇⋅E=ρε0∇⋅B=0∇×E=−∂B∂t∇×B=μ0(J+ε0∂E∂t) \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} ∇⋅E∇⋅B∇×E∇×B​=ε0​ρ​=0=−∂t∂B​=μ0​(J+ε0​∂t∂E​)​"},"title":"数学公式"},"/docs/guide/latex/":{"data":{"":"KaTeX\\KaTeXKATE​X is used for rendering LaTeX math expressions. No manual activation is needed, you can start using LaTeX math expressions in your Markdown content right away.","chemistry#Chemistry":"Chemistry expressions are supported via mhchem extension.\nInline: HX2O\\ce{H2O}HX2​O is water.\nSeparate paragraph:\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ HgX2+→IX−HgIX2→IX−[HgXIIIX4]X2−\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}HgX2+IX−​HgIX2​IX−​[HgXIIIX4​]X2−","example#Example":"Both inline and separate paragraph LaTeX math expressions are supported in the Markdown content.\nInline page.mdThis \\(\\sigma(z) = \\frac{1}{1 + e^{-z}}\\) is inline. This σ(z)=11+e−z\\sigma(z) = \\frac{1}{1 + e^{-z}}σ(z)=1+e−z1​ is inline.\nSeparate Paragraph page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ will be rendered as:\nF(ω)=∫−∞∞f(t)e−jωt dtF(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dtF(ω)=∫−∞∞​f(t)e−jωtdt Important\nPlease enable and configure the passthrough extension in the Hugo configuration file. It preserves raw content within the delimiters to avoid rendering issues for complex expressions.\nhugo.yamlmarkup: goldmark: extensions: passthrough: delimiters: block: [['\\[', '\\]'], ['$$', '$$']] inline: [['\\(', '\\)']] enable: true For example, using the aligned environment:\npage.md$$ \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} $$ will be rendered as:\n∇⋅E=ρε0∇⋅B=0∇×E=−∂B∂t∇×B=μ0(J+ε0∂E∂t) \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} ∇⋅E∇⋅B∇×E∇×B​=ε0​ρ​=0=−∂t∂B​=μ0​(J+ε0​∂t∂E​)​","supported-functions#Supported Functions":"For a list of supported functions, see KaTeX supported functions."},"title":"LaTeX"},"/docs/guide/markdown.fa/":{"data":{"":"Hugo از سینتکس مارک‌داون برای قالب‌بندی متن، ایجاد فهرست و موارد دیگر پشتیبانی می‌کند. این صفحه برخی از رایج‌ترین نمونه‌های سینتکس مارک‌داون را به شما نشان می‌دهد.","مثالهای-مارکداون#مثال‌های مارک‌داون":"ظاهر طراحی دادن به متن سبک سینتکس مثال خروجی توپر **متن توپر** **متن توپر** متن توپر کج *متن کج* *متن کج* متن کج خط خورده ~~متن خط خورده~~ ~~متن خط خورده~~ متن خط خورده پایین‌نویس \u003csub\u003e\u003c/sub\u003e این یک متن \u003csub\u003eپایین‌نویس\u003c/sub\u003e است این یک متن پایین‌نویس است بالانویس \u003csup\u003e\u003c/sup\u003e این یک متن \u003csup\u003eبالانویس\u003c/sup\u003e است این یک متن بالانویس است بلوک نقل‌قول بلوک نقل‌قول با ذکر منبع\nبا اشتراک‌گذاری حافظه ارتباط برقرار نکنید، حافظه را با برقراری ارتباط به اشتراک بگذارید.\n— راب پایک1\nMarkdown\u003e با اشتراک‌گذاری حافظه ارتباط برقرار نکنید، حافظه را با برقراری ارتباط به اشتراک بگذارید.\u003cbr\u003e \u003e — \u003ccite\u003eراب پایک[^1]\u003c/cite\u003e [^1]: نقل‌قول بالا گزیده‌ای از [سخنرانی](https://www.youtube.com/watch?v=PAAkCSZUG1c) راب پایک در Gopherfest، در تاریخ ۲۷ آبان ۱۳۹۴ است. جدول‌ها جدول‌ها بخشی از مشخصات اصلی مارک‌داون نیستند، اما Hugo از آنها در خارج از جعبه پشتیبانی می‌کند.\nنام سن گودرز ۳۰ آصف ۳۴ Markdown| نام | سن | |--------|------| | گودرز | ۳۰| | آصف | ۳۴ | مارک‌داون درون‌خطی درون جدول‌ها کج توپر کد کج توپر کد Markdown| کج | توپر | کد | | -------- | -------- | ------ | | *کج* | **توپر** | `کد` | بلوک‌های کد برجسته‌کردن سینتکس فهرست‌ها فهرست مرتب‌شده اولین آیتم دومین آیتم سومین آیتم Markdown1. اولین آیتم 2. دومین آیتم 3. سومین آیتم فهرست مرتب‌نشده فهرست آیتم یک آیتم دیگه و یک آیتم دیگه Markdown* فهرست آیتم * یک آیتم دیگه * و یک آیتم دیگه فهرست تو در تو میوه سیب پرتقال موز لبنیات شیر پنیر Markdown* میوه * سیب * پرتقال * موز * لبنیات * شیر * پنیر عکس‌ها Markdown![landscape](https://picsum.photos/800/600) با توضیحات:\nیک چشم‌انداز Unsplash Markdown![landscape](https://picsum.photos/800/600 \"یک چشم‌انداز Unsplash\") نقل‌قول بالا گزیده‌ای از سخنرانی راب پایک در Gopherfest، در تاریخ ۲۷ آبان ۱۳۹۴ است. ↩︎","منابع-یادگیری#منابع یادگیری":" راهنمای مارک‌داون برگه تقلب مارک‌داون آموزش مارک‌داون مرجع مارک‌داون ","پیکربندی#پیکربندی":"Hugo از Goldmark برای تجزیه مارک‌داون استفاده می‌کند. رندر مارک‌داون را می‌توان در hugo.yaml تحت markup.goldmark پیکربندی کنید. در زیر پیکربندی پیش‌فرض هگزترا را می‌توانید ببینید:\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false برای گزینه‌های پیکربندی بیشتر، به مستندات Hugo در پیکربندی نشانه‌گذاری مراجعه کنید."},"title":"مارک‌داون"},"/docs/guide/markdown.ja/":{"data":{"":"Hugoは、テキストのフォーマットやリストの作成などにMarkdown構文をサポートしています。このページでは、最も一般的なMarkdown構文の例をいくつか紹介します。","markdownの例#Markdownの例":"テキストのスタイル スタイル 構文 例 出力 太字 **太字テキスト** **太字テキスト** 太字テキスト 斜体 *斜体テキスト* *斜体テキスト* 斜体テキスト 取り消し線 ~~取り消し線テキスト~~ ~~取り消し線テキスト~~ 取り消し線テキスト 下付き文字 \u003csub\u003e\u003c/sub\u003e これは\u003csub\u003e下付き文字\u003c/sub\u003eです これは下付き文字です 上付き文字 \u003csup\u003e\u003c/sup\u003e これは\u003csup\u003e上付き文字\u003c/sup\u003eです これは上付き文字です ブロッククォート 引用元付きのブロッククォート\nメモリを共有してコミュニケーションするのではなく、コミュニケーションしてメモリを共有せよ。\n— ロブ・パイク1\nMarkdown\u003e メモリを共有してコミュニケーションするのではなく、コミュニケーションしてメモリを共有せよ。\u003cbr\u003e \u003e — \u003ccite\u003eロブ・パイク[^1]\u003c/cite\u003e [^1]: 上記の引用は、2015年11月18日のGopherfestでのロブ・パイクの[講演](https://www.youtube.com/watch?v=PAAkCSZUG1c)から抜粋したものです。 アラート アラートは、ブロッククォート構文に基づくMarkdown拡張で、重要な情報を強調するために使用できます。 GitHubスタイルのアラートがサポートされています。 Hextraの最新バージョンとHugo v0.134.0以降を使用していることを確認してください。\nNote\nユーザーが知っておくべき有用な情報で、内容をざっと見る際にも役立ちます。\nTip\n物事をより良く、または簡単に行うための役立つアドバイス。\nImportant\nユーザーが目標を達成するために知っておくべき重要な情報。\nWarning\n問題を避けるために即座にユーザーの注意を引く必要がある緊急の情報。\nCaution\n特定のアクションのリスクやネガティブな結果についてのアドバイス。\nMarkdown\u003e [!NOTE] \u003e ユーザーが知っておくべき有用な情報で、内容をざっと見る際にも役立ちます。 \u003e [!TIP] \u003e 物事をより良く、または簡単に行うための役立つアドバイス。 \u003e [!IMPORTANT] \u003e ユーザーが目標を達成するために知っておくべき重要な情報。 \u003e [!WARNING] \u003e 問題を避けるために即座にユーザーの注意を引く必要がある緊急の情報。 \u003e [!CAUTION] \u003e 特定のアクションのリスクやネガティブな結果についてのアドバイス。 テーブル テーブルはMarkdownのコア仕様には含まれていませんが、Hugoはデフォルトでサポートしています。\n名前 年齢 ボブ 27 アリス 23 Markdown| 名前 | 年齢 | |--------|------| | ボブ | 27 | | アリス | 23 | テーブル内のインラインMarkdown 斜体 太字 コード 斜体 太字 コード Markdown| 斜体 | 太字 | コード | | -------- | -------- | ------ | | *斜体* | **太字** | `コード` | コードブロック シンタックスハイライト リスト 順序付きリスト 最初の項目 2番目の項目 3番目の項目 Markdown1. 最初の項目 2. 2番目の項目 3. 3番目の項目 順序なしリスト リスト項目 別の項目 さらに別の項目 Markdown* リスト項目 * 別の項目 * さらに別の項目 ネストされたリスト 果物 りんご オレンジ バナナ 乳製品 牛乳 チーズ Markdown* 果物 * りんご * オレンジ * バナナ * 乳製品 * 牛乳 * チーズ 画像 Markdown![風景](https://picsum.photos/800/600) キャプション付き:\nUnsplashの風景 Markdown![風景](https://picsum.photos/800/600 \"Unsplashの風景\") 上記の引用は、2015年11月18日のGopherfestでのロブ・パイクの講演から抜粋したものです。 ↩︎","学習リソース#学習リソース":" Markdownガイド Markdownチートシート Markdownチュートリアル Markdownリファレンス ","設定#設定":"HugoはMarkdownの解析にGoldmarkを使用しています。 Markdownのレンダリングは、hugo.yamlのmarkup.goldmarkで設定できます。 以下はHextraのデフォルト設定です:\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false その他の設定オプションについては、HugoのドキュメントConfigure Markupを参照してください。"},"title":"Markdown"},"/docs/guide/markdown.zh-cn/":{"data":{"":"Hugo 支持使用 Markdown 语法来格式化文本、创建列表等。本页将展示一些最常见的 Markdown 语法示例。","markdown-示例#Markdown 示例":"文本样式 样式 语法 示例 输出 粗体 **粗体文本** **粗体文本** 粗体文本 斜体 *斜体文本* *斜体文本* 斜体文本 删除线 ~~删除线文本~~ ~~删除线文本~~ 删除线文本 下标 \u003csub\u003e\u003c/sub\u003e 这是一个\u003csub\u003e下标\u003c/sub\u003e文本 这是一个下标文本 上标 \u003csup\u003e\u003c/sup\u003e 这是一个\u003csup\u003e上标\u003c/sup\u003e文本 这是一个上标文本 引用块 带出处的引用块\n不要通过共享内存来通信，而要通过通信来共享内存。\n— Rob Pike1\nMarkdown\u003e 不要通过共享内存来通信，而要通过通信来共享内存。\u003cbr\u003e \u003e — \u003ccite\u003eRob Pike[^1]\u003c/cite\u003e [^1]: 以上引用摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 上的[演讲](https://www.youtube.com/watch?v=PAAkCSZUG1c)。 提示框 提示框是基于引用块语法的 Markdown 扩展，可用于强调关键信息。 支持 GitHub 风格的提示框。 请确保您使用的是最新版本的 Hextra 和 Hugo v0.134.0 或更高版本。\nNote\n用户应该知道的有用信息，即使是在浏览内容时。\nTip\n帮助用户更好地或更轻松地完成任务的建议。\nImportant\n用户需要了解的关键信息，以实现他们的目标。\nWarning\n需要用户立即注意的紧急信息，以避免问题。\nCaution\n关于某些操作的风险或负面结果的建议。\nMarkdown\u003e [!NOTE] \u003e 用户应该知道的有用信息，即使是在浏览内容时。 \u003e [!TIP] \u003e 帮助用户更好地或更轻松地完成任务的建议。 \u003e [!IMPORTANT] \u003e 用户需要了解的关键信息，以实现他们的目标。 \u003e [!WARNING] \u003e 需要用户立即注意的紧急信息，以避免问题。 \u003e [!CAUTION] \u003e 关于某些操作的风险或负面结果的建议。 表格 表格不是 Markdown 核心规范的一部分，但 Hugo 默认支持它们。\n姓名 年龄 Bob 27 Alice 23 Markdown| 姓名 | 年龄 | |--------|------| | Bob | 27 | | Alice | 23 | 表格中的内联 Markdown 斜体 粗体 代码 斜体 粗体 代码 Markdown| 斜体 | 粗体 | 代码 | | -------- | -------- | ------ | | *斜体* | **粗体** | `代码` | 代码块 语法高亮 列表 有序列表 第一项 第二项 第三项 Markdown1. 第一项 2. 第二项 3. 第三项 无序列表 列表项 另一个项 再一个项 Markdown* 列表项 * 另一个项 * 再一个项 嵌套列表 水果 苹果 橙子 香蕉 乳制品 牛奶 奶酪 Markdown* 水果 * 苹果 * 橙子 * 香蕉 * 乳制品 * 牛奶 * 奶酪 图片 Markdown![风景](https://picsum.photos/800/600) 带标题：\nUnsplash 风景 Markdown![风景](https://picsum.photos/800/600 \"Unsplash 风景\") 以上引用摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 上的演讲。 ↩︎","学习资源#学习资源":" Markdown 指南 Markdown 速查表 Markdown 教程 Markdown 参考 ","配置#配置":"Hugo 使用 Goldmark 进行 Markdown 解析。 Markdown 渲染可以在 hugo.yaml 中的 markup.goldmark 下进行配置。 以下是 Hextra 的默认配置：\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false 更多配置选项，请参阅 Hugo 文档中的 配置 Markup。"},"title":"Markdown"},"/docs/guide/markdown/":{"data":{"":"Hugo supports Markdown syntax for formatting text, creating lists, and more. This page will show you some of the most common Markdown syntax examples.","configuration#Configuration":"Hugo uses Goldmark for Markdown parsing. Markdown rendering can be configured in hugo.yaml under markup.goldmark. Below is the default configuration for Hextra:\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false For more configuration options, see Hugo documentation on Configure Markup.","learning-resources#Learning Resources":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","markdown-examples#Markdown Examples":"Styling Text Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* *italicized text* italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text Blockquotes Blockquote with attribution\nDon’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nMarkdown\u003e Don't communicate by sharing memory, share memory by communicating.\u003cbr\u003e \u003e — \u003ccite\u003eRob Pike[^1]\u003c/cite\u003e [^1]: The above quote is excerpted from Rob Pike's [talk](https://www.youtube.com/watch?v=PAAkCSZUG1c) during Gopherfest, November 18, 2015. Alerts Alerts are a Markdown extension based on the blockquote syntax that you can use to emphasize critical information. GitHub-style alerts are supported. Please make sure you are using the latest version of Hextra and Hugo v0.134.0 or later.\nNote\nUseful information that users should know, even when skimming content.\nTip\nHelpful advice for doing things better or more easily.\nImportant\nKey information users need to know to achieve their goal.\nWarning\nUrgent info that needs immediate user attention to avoid problems.\nCaution\nAdvises about risks or negative outcomes of certain actions.\nMarkdown\u003e [!NOTE] \u003e Useful information that users should know, even when skimming content. \u003e [!TIP] \u003e Helpful advice for doing things better or more easily. \u003e [!IMPORTANT] \u003e Key information users need to know to achieve their goal. \u003e [!WARNING] \u003e Urgent info that needs immediate user attention to avoid problems. \u003e [!CAUTION] \u003e Advises about risks or negative outcomes of certain actions. Tables Tables aren’t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Markdown| Name | Age | |--------|------| | Bob | 27 | | Alice | 23 | Inline Markdown within tables Italics Bold Code italics bold code Markdown| Italics | Bold | Code | | -------- | -------- | ------ | | *italics* | **bold** | `code` | Code Blocks Syntax Highlighting Lists Ordered List First item Second item Third item Markdown1. First item 2. Second item 3. Third item Unordered List List item Another item And another item Markdown* List item * Another item * And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Markdown* Fruit * Apple * Orange * Banana * Dairy * Milk * Cheese Images Markdown![landscape](https://picsum.photos/800/600) With caption:\nUnsplash Landscape Markdown![landscape](https://picsum.photos/800/600 \"Unsplash Landscape\") For more advanced functionality, use Hugo’s built-in Figure shortcode.\nThe above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎"},"title":"Markdown"},"/docs/guide/organize-files.fa/":{"data":{"":"","افزودن-تصاویر#افزودن تصاویر":"برای افزودن تصاویر، ساده‌ترین راه این است که پرونده‌های عکس‌ها را در همان دایرکتوری پرونده مارک‌داون قرار دهید. برای مثال، یک پرونده عکس image.png را در کنار پرونده my-page.md اضافه کنید:\ncontent docs my-page.md image.png سپس، می‌توانید از سینتکس مارک‌داون زیر برای افزودن عکس به محتوا استفاده کنید:\ncontent/docs/my-page.md![](image.png) همچنین می‌توانید از ویژگی بسته‌های صفحه Hugo برای سازماندهی پرونده‌های عکس‌ها همراه با پرونده مارک‌داون استفاده کنید. برای رسیدن به این هدف، پرونده my-page.md را به یک دایرکتوری my-page تبدیل کنید و محتوا را در پرونده‌ای به نام index.md قرار دهید و پرونده‌های عکس‌ها را در دایرکتوری my-page قرار دهید:\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) همچنین می‌توانید پرونده‌های عکس‌ها را در دایرکتوری static قرار دهید که عکس‌ها را برای همه صفحات در دسترس قرار می‌دهد:\nstatic images image.png content docs my-page.md توجه داشته باشید که مسیر عکس با یک اسلش / شروع می‌شود و نسبت به دایرکتوری استاتیک است:\ncontent/docs/my-page.md![](/images/image.png) ","ساختار-دایرکتوری#ساختار دایرکتوری":"به طور پیش‌فرض، Hugo پرونده‌های مارک‌داون را در فهرست content جستجو می‌کند و ساختار فهرست، ساختار خروجی نهایی وب‌سایت شما را تعیین می‌کند. همین سایت را به عنوان مثال در نظر بگیرید:\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md هر یک از پرونده‌های _index.md صفحه اصلی هر بخش هستند که برای هر بخش مجزا است. سایر پرونده‌های مارک‌داون صفحه‌های معمولی دیگه‌ای هستند.\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","طرحبندیها#طرح‌بندی‌ها":"هگزترا سه طرح‌بندی برای انواع مختلف محتوا ارائه می‌کند:\nطرح‌بندی دایرکتوری ویژگی‌ها docs content/docs/ ایده‌آل برای مستندات ساختار یافته، مانند این بخش. blog content/blog/ برای نوشته‌های وبلاگ، با هر فهرست‌بندی و هم نمایش جزئیات مقاله. default همه دایرکتوری‌های دیگر مشاهده مقاله تک صفحه‌ای بدون نوار کناری. برای سفارشی کردن یک بخش برای منعکس کردن رفتار یک طرح داخلی، نوع طرح‌بندی مورد نظر را در قسمت بالایی قسمت _index.md` مشخص کنید.\ncontent/my-docs/_index.md--- title: مستندات من cascade: type: docs --- پیکربندی مثال بالا تضمین می‌کند که پرونده‌های محتوای در داخل content/my-docs/ به‌طور پیش‌فرض به عنوان مستندات (نوع docs) مورد استفاده قرار می‌گیرند.","ناوبری-نوار-کناری#ناوبری نوار کناری":"ناوبری نوار کناری به طور خودکار براساس حروف الفبا ایجاد می‌شود. برای پیکربندی دستی ترتیب نوار کناری، می‌توانید از پارامتر weight در قسمت بالایی پرونده‌های مارک‌داون استفاده کنید.\ncontent/docs/guide/_index.md--- title: راهنما weight: 2 --- ℹ️ توصیه می‌کنیم نوار کناری خیلی عمیق نباشد. اگر محتوای زیادی دارید، آنها را به چند بخش تقسیم کنید. ","پیکربندی-دایرکتوری-محتوا#پیکربندی دایرکتوری محتوا":"به طور پیش‌فرض، دایرکتوری ریشه content/ توسط Hugo برای ساخت سایت استفاده می‌شود. اگر نیاز به استفاده از دایرکتوری متفاوتی برای محتوا دارید، برای مثال docs/، این کار را می‌توانید با تنظیم پارامتر contentDir در پیکربندی سایت hugo.yaml انجام دهید."},"title":"سازماندهی پرونده‌ها"},"/docs/guide/organize-files.ja/":{"data":{"":"","コンテンツディレクトリの設定#コンテンツディレクトリの設定":"デフォルトでは、Hugoはサイトを構築するためにルートのcontent/ディレクトリを使用します。 例えばdocs/など、異なるディレクトリをコンテンツに使用する必要がある場合は、サイト設定hugo.yamlでcontentDirパラメータを設定することで行えます。","サイドバーナビゲーション#サイドバーナビゲーション":"サイドバーナビゲーションは、コンテンツの整理に基づいて自動的に生成されます。サイドバーの順序を手動で設定するには、Markdownファイルのフロントマターでweightパラメータを使用します。\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ サイドバーがあまり深くならないようにすることをお勧めします。多くのコンテンツがある場合は、複数のセクションに分割することを検討してください。 ","ディレクトリ構造#ディレクトリ構造":"デフォルトでは、Hugoはcontentディレクトリ内のMarkdownファイルを検索し、ディレクトリの構造がウェブサイトの最終的な出力構造を決定します。 このサイトを例に取ります：\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md 各_index.mdファイルは、対応するセクションのインデックスページです。他のMarkdownファイルは通常のページです。\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","パンくずナビゲーション#パンくずナビゲーション":"パンくずは、/contentのディレクトリ構造に基づいて自動生成されます。\n例えば、上記のファイル構造を考えます。その構造に基づいて、/docs/guide/organize-files/ページの上部にパンくずが自動的に表示されます：\nDocumentation \u003e Guide \u003e Organize Files パンくずリンクのタイトルをカスタマイズ デフォルトでは、各パンくずリンクはそのページのtitleパラメータに基づいて生成されます。これをカスタマイズするには、linkTitleを指定します。\n例えば、Organize Filesの代わりにFoo Barと表示したい場合：\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: Organize Files --- これにより、以下のパンくずが生成されます：\nDocumentation \u003e Guide \u003e Foo Bar パンくずを非表示にする ページのフロントマターでbreadcrumbs: falseを指定することで、パンくずを完全に非表示にできます：\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: Organize Files --- ","レイアウト#レイアウト":"Hextraは、異なるコンテンツタイプに対して3つのレイアウトを提供します：\nレイアウト ディレクトリ 特徴 docs content/docs/ 構造化されたドキュメントに最適で、このセクションと同じです。 blog content/blog/ ブログ投稿用で、リスト表示と詳細記事表示の両方があります。 default その他のディレクトリ サイドバーなしの単一ページ記事表示です。 セクションの動作をビルトインレイアウトと同じにするには、セクションの_index.mdのフロントマターで希望するタイプを指定します。\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs --- 上記の設定例により、content/my-docs/内のコンテンツファイルはデフォルトでドキュメント（docsタイプ）として扱われます。","画像の追加#画像の追加":"画像を追加する最も簡単な方法は、画像ファイルをMarkdownファイルと同じディレクトリに置くことです。 例えば、my-page.mdファイルと同じディレクトリにimage.pngファイルを追加します：\ncontent docs my-page.md image.png その後、以下のMarkdown構文を使用してコンテンツに画像を追加できます：\ncontent/docs/my-page.md![](image.png) また、Hugoのページバンドル機能を利用して、画像ファイルをMarkdownファイルと一緒に整理することもできます。そのためには、my-page.mdファイルをmy-pageディレクトリに変換し、コンテンツをindex.mdというファイルに置き、画像ファイルをmy-pageディレクトリ内に置きます：\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) または、画像ファイルをstaticディレクトリに置くこともできます。これにより、すべてのページで画像が利用可能になります：\nstatic images image.png content docs my-page.md 画像パスはスラッシュ/で始まり、staticディレクトリからの相対パスであることに注意してください：\ncontent/docs/my-page.md![](/images/image.png) "},"title":"ファイルの整理"},"/docs/guide/organize-files.zh-cn/":{"data":{"":"","侧边栏导航#侧边栏导航":"侧边栏导航会根据内容组织按字母顺序自动生成。要手动配置侧边栏顺序，可以在 Markdown 文件的前言中使用 weight 参数。\ncontent/docs/guide/_index.md--- title: 指南 weight: 2 --- ℹ️ 建议不要让侧边栏过深。如果你有很多内容，考虑将它们分成多个部分。 ","布局#布局":"Hextra 为不同类型的内容提供了三种布局：\n布局 目录 特性 docs content/docs/ 适合结构化文档，与本部分相同。 blog content/blog/ 用于博客文章，包含列表和详细文章视图。 default 其他所有目录 单页文章视图，无侧边栏。 要将某个部分自定义为与内置布局相同的行为，可以在该部分的 _index.md 的前言中指定所需的类型。\ncontent/my-docs/_index.md--- title: 我的文档 cascade: type: docs --- 上述示例配置确保 content/my-docs/ 中的内容文件默认会被视为文档（docs 类型）。","添加图片#添加图片":"添加图片的最简单方法是将图片文件放在与 Markdown 文件相同的目录中。 例如，将图片文件 image.png 与 my-page.md 文件放在一起：\ncontent docs my-page.md image.png 然后，我们可以使用以下 Markdown 语法将图片添加到内容中：\ncontent/docs/my-page.md![](image.png) 我们还可以利用 Hugo 的 页面包 功能将图片文件与 Markdown 文件一起组织。为此，将 my-page.md 文件转换为目录 my-page，并将内容放入名为 index.md 的文件中，然后将图片文件放入 my-page 目录中：\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) 或者，我们也可以将图片文件放在 static 目录中，这样所有页面都可以访问这些图片：\nstatic images image.png content docs my-page.md 注意，图片路径以斜杠 / 开头，并且相对于静态目录：\ncontent/docs/my-page.md![](/images/image.png) ","目录结构#目录结构":"默认情况下，Hugo 会在 content 目录中查找 Markdown 文件，目录的结构决定了网站最终的输出结构。 以本网站为例：\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md 每个 _index.md 文件都是对应部分的索引页面。其他 Markdown 文件则是常规页面。\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","配置内容目录#配置内容目录":"默认情况下，Hugo 使用根目录 content/ 来构建网站。 如果你需要使用不同的目录来存放内容，例如 docs/，可以通过在站点配置文件 hugo.yaml 中设置 contentDir 参数来实现。","面包屑导航#面包屑导航":"面包屑导航会根据 /content 的目录结构自动生成。\n例如，考虑上面展示的目录结构。根据该结构，页面 /docs/guide/organize-files/ 顶部的面包屑导航会自动显示如下：\n文档 \u003e 指南 \u003e 组织文件 自定义面包屑链接标题 默认情况下，每个面包屑链接是根据页面的 title 参数生成的。你可以通过指定 linkTitle 来自定义。\n例如，如果我们希望面包屑显示为 Foo Bar 而不是 Organize Files：\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: 组织文件 --- 现在会生成以下面包屑：\n文档 \u003e 指南 \u003e Foo Bar 隐藏面包屑 你可以通过在页面的前言中指定 breadcrumbs: false 来完全隐藏面包屑：\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: 组织文件 --- "},"title":"组织文件"},"/docs/guide/organize-files/":{"data":{"":"","add-images#Add Images":"To add images, the easiest way is to put the image files in the same directory as the Markdown file. For example, add an image file image.png alongside the my-page.md file:\ncontent docs my-page.md image.png Then, we can use the following Markdown syntax to add the image to the content:\ncontent/docs/my-page.md![](image.png) We can also utilize the page bundles feature of Hugo to organize the image files together with the Markdown file. To achieve that, turn the my-page.md file into a directory my-page and put the content into a file named index.md, and put the image files inside the my-page directory:\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) Alternatively, we can also put the image files in the static directory, which will make the images available for all pages:\nstatic images image.png content docs my-page.md Note that the image path begins with a slash / and is relative to the static directory:\ncontent/docs/my-page.md![](/images/image.png) ","breadcrumb-navigation#Breadcrumb Navigation":"Breadcrumbs are auto-generated based on the directory structure of /content.\nFor example, consider the file structure demonstrated above. Given that structure, the breadcrumbs atop the page at /docs/guide/organize-files/ would appear automatically as follows:\nDocumentation \u003e Guide \u003e Organize Files Customizing Breadcrumb Link Titles By default, each breadcrumb link is generated based on that page’s title parameter. You can customize this by specifying a linkTitle.\nFor example, if instead of Organize Files we wanted the breadcrumb to be Foo Bar:\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: Organize Files --- This would now generate the following breadcrumbs:\nDocumentation \u003e Guide \u003e Foo Bar Hiding Breadcrumbs You can hide breadcrumbs completely from a page by specifying breadcrumbs: false in its front matter:\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: Organize Files --- ","configure-content-directory#Configure Content Directory":"By default, the root content/ directory is used by Hugo to build the site. If you need to use a different directory for content, for example docs/, this can be done by setting the contentDir parameter in the site configuration hugo.yaml.","directory-structure#Directory Structure":"By default, Hugo searches for Markdown files in the content directory, and the structure of the directory determines the final output structure of your website. Take this site as an example:\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md Each of the _index.md files is the index page for the corresponding section. The other Markdown files are regular pages.\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","layouts#Layouts":"Hextra offers three layouts for different content types:\nLayout Directory Features docs content/docs/ Ideal for structured documentation, same as this section. blog content/blog/ For blog postings, with both listing and detailed article views. default All other directories Single-page article view without sidebar. To customize a section to mirror the behavior of a built-in layout, specify the desired type in the front matter of the section’s _index.md.\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs --- The above example configuration ensures that the content files inside content/my-docs/ will be treated as documentation (docs type) by default.","sidebar-navigation#Sidebar Navigation":"The sidebar navigation is generated automatically based on the content organization alphabetically. To manually configure the sidebar order, we can use the weight parameter in the front matter of the Markdown files.\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ It is recommended to keep the sidebar not too deep. If you have a lot of content, consider splitting them into multiple sections. "},"title":"Organize Files"},"/docs/guide/shortcodes/":{"data":{"":"Hugo Shortcodes are simple snippets inside your content files calling built-in or custom templates.\nHextra provides a collection of beautiful shortcodes to enhance your content.\nCallout Cards Details FileTree Icon Steps Tabs Additional shortcodes provided by Hugo and Hextra:\nJupyter Notebook alpha Others "},"title":"Shortcodes"},"/docs/guide/shortcodes/_index.fa/":{"data":{"":"کدهای کوتاه Hugo قطعه‌های ساده‌ای در داخل پرونده‌های محتوای شما هستند که قالب‌های داخلی یا سفارشی را فراخوانی می‌کنند.\nهگزترا مجموعه‌ای از کدهای کوتاه زیبا را برای بهبود محتوای شما ارائه می‌کند.\nFileTree آیکون جزئیات زبانه‌ها فراخوانی کارت‌ها مراحل "},"title":"کدهای کوتاه"},"/docs/guide/shortcodes/_index.ja/":{"data":{"":"Hugo ショートコードは、コンテンツファイル内に埋め込まれるシンプルなスニペットで、組み込みまたはカスタムテンプレートを呼び出します。\nHextra は、コンテンツを強化するための美しいショートコードのコレクションを提供します。\nコールアウト カード 詳細 FileTree アイコン ステップ タブ Hugo と Hextra が提供する追加のショートコード:\nJupyter Notebook alpha その他 "},"title":"ショートコード"},"/docs/guide/shortcodes/_index.zh-cn/":{"data":{"":"Hugo 短代码是内容文件中的简单片段，用于调用内置或自定义模板。\nHextra 提供了一系列精美的短代码，以增强您的内容。\n标注 卡片 详情 文件树 图标 步骤 标签页 Hugo 和 Hextra 提供的其他短代码：\nJupyter 笔记本 alpha 其他 "},"title":"短代码"},"/docs/guide/shortcodes/callout.fa/":{"data":{"":"یک کامپوننت داخلی برای نشان دادن اطلاعات مهم به خواننده.","استفاده#استفاده":"پیش‌فرض 🌐 Hugo را می‌توانید برای ایجاد طیف گسترده‌ای از وب‌سایت‌ها، از جمله وبلاگ‌ها، نمونه‌کارها، سایت‌های مستندسازی و غیره استفاده کرد. {{\u003c callout emoji=\"🌐\" \u003e}} Hugo را می‌توانید برای ایجاد طیف گسترده‌ای از وب‌سایت‌ها، از جمله وبلاگ‌ها، نمونه‌کارها، سایت‌های مستندسازی و غیره استفاده کرد. {{\u003c /callout \u003e}} اطلاعات ℹ️ لطفا برای مشاهده آخرین نسخه‌ها به گیت‌هاب مراجعه کنید. {{\u003c callout type=\"info\" \u003e}} لطفا برای مشاهده آخرین نسخه‌ها به گیت‌هاب مراجعه کنید. {{\u003c /callout \u003e}} هشدار ⚠️ این API در نسخه بعدی منسوخ خواهد شد. {{\u003c callout type=\"warning\" \u003e}} این API در نسخه بعدی منسوخ خواهد شد. {{\u003c /callout \u003e}} خطا 🚫 مشکلی پیش آمد و اتفاقی رخ خواهد شد. {{\u003c callout type=\"error\" \u003e}} مشکلی پیش آمد و اتفاقی رخ خواهد شد. {{\u003c /callout \u003e}} ","مثال#مثال":" 👾 فراخوانی یک متن کوتاه است که برای جلب توجه در نظر گرفته شده است. ℹ️ فراخوانی یک متن کوتاه است که برای جلب توجه در نظر گرفته شده است. ⚠️ فراخوانی یک متن کوتاه است که برای جلب توجه در نظر گرفته شده است. 🚫 فراخوانی یک متن کوتاه است که برای جلب توجه در نظر گرفته شده است. "},"title":"فراخوانی"},"/docs/guide/shortcodes/callout.ja/":{"data":{"":"読者に重要な情報を示すための組み込みコンポーネントです。\nNote\nGitHubスタイルのアラートはv0.9.0以降でサポートされています。 これはMarkdown構文を活用してコールアウトをレンダリングし、コンテンツの移植性と可読性を向上させます。","使用方法#使用方法":"デフォルト 🌐 Hugoは、ブログ、ポートフォリオ、ドキュメントサイトなど、さまざまなウェブサイトを作成するために使用できます。 {{\u003c callout emoji=\"🌐\" \u003e}} Hugoは、ブログ、ポートフォリオ、ドキュメントサイトなど、さまざまなウェブサイトを作成するために使用できます。 {{\u003c /callout \u003e}} 情報 ℹ️ 最新のリリースを確認するには、GitHubをご覧ください。 {{\u003c callout type=\"info\" \u003e}} 最新のリリースを確認するには、GitHubをご覧ください。 {{\u003c /callout \u003e}} 警告 ⚠️ このAPIは次のバージョンで非推奨になります。 {{\u003c callout type=\"warning\" \u003e}} **コールアウト**は、注意を引くための短いテキストです。 {{\u003c /callout \u003e}} エラー 🚫 何か問題が発生し、爆発しそうです。 {{\u003c callout type=\"error\" \u003e}} 何か問題が発生し、爆発しそうです。 {{\u003c /callout \u003e}} ","例#例":" 👾 コールアウトは、注意を引くための短いテキストです。 ℹ️ コールアウトは、注意を引くための短いテキストです。 ⚠️ コールアウトは、注意を引くための短いテキストです。 🚫 コールアウトは、注意を引くための短いテキストです。 "},"title":"コールアウト"},"/docs/guide/shortcodes/callout.zh-cn/":{"data":{"":"一个内置组件，用于向读者展示重要信息。\nNote\n自 v0.9.0 起支持 GitHub 风格的提醒。 它利用 Markdown 语法来渲染提示框，确保内容具有更好的可移植性和可读性。","用法#用法":"默认 🌐 Hugo 可用于创建各种类型的网站，包括博客、作品集、文档站点等。 {{\u003c callout emoji=\"🌐\" \u003e}} Hugo 可用于创建各种类型的网站，包括博客、作品集、文档站点等。 {{\u003c /callout \u003e}} 信息 ℹ️ 请访问 GitHub 查看最新版本。 {{\u003c callout type=\"info\" \u003e}} 请访问 GitHub 查看最新版本。 {{\u003c /callout \u003e}} 警告 ⚠️ 此 API 将在下一个版本中弃用。 {{\u003c callout type=\"warning\" \u003e}} **提示框** 是一段简短的文本，旨在吸引注意力。 {{\u003c /callout \u003e}} 错误 🚫 出错了，系统即将崩溃。 {{\u003c callout type=\"error\" \u003e}} 出错了，系统即将崩溃。 {{\u003c /callout \u003e}} ","示例#示例":" 👾 提示框 是一段简短的文本，旨在吸引注意力。 ℹ️ 提示框 是一段简短的文本，旨在吸引注意力。 ⚠️ 提示框 是一段简短的文本，旨在吸引注意力。 🚫 提示框 是一段简短的文本，旨在吸引注意力。 "},"title":"提示框"},"/docs/guide/shortcodes/callout/":{"data":{"":"A built-in component to show important information to the reader.\nNote\nGitHub-style alerts are supported since v0.9.0. It leverages Markdown syntax to render the callout which ensures better portability and readability of the content.","example#Example":" 👾 A callout is a short piece of text intended to attract attention. ℹ️ A callout is a short piece of text intended to attract attention. ⚠️ A callout is a short piece of text intended to attract attention. 🚫 A callout is a short piece of text intended to attract attention. ","usage#Usage":"Default 🌐 Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c callout emoji=\"🌐\" \u003e}} Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c /callout \u003e}} Info ℹ️ Please visit GitHub to see the latest releases. {{\u003c callout type=\"info\" \u003e}} Please visit GitHub to see the latest releases. {{\u003c /callout \u003e}} Warning ⚠️ This API will be deprecated in the next version. {{\u003c callout type=\"warning\" \u003e}} A **callout** is a short piece of text intended to attract attention. {{\u003c /callout \u003e}} Error 🚫 Something went wrong and it’s going to explode. {{\u003c callout type=\"error\" \u003e}} Something went wrong and it's going to explode. {{\u003c /callout \u003e}} "},"title":"Callout"},"/docs/guide/shortcodes/cards.fa/":{"data":{"":"","استفاده#استفاده":" {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"فراخوانی\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"/fa\" title=\"بدون آیکون\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"کارت تصویر\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"یک چشم‌انداز Unsplash\" */\u003e}} {{\u003c/* card link=\"/\" title=\"تصویر محلی\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"تصویر خام در دایرکتوری استاتیک است.\" */\u003e}} {{\u003c/* card link=\"/\" title=\"تصویر محلی\" image=\"images/space.jpg\" subtitle=\"تصویر در دایرکتوری assets می‌باشد و پردازش توسط Hugo شده است.\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} ","مثال#مثال":" فراخوانی بدون آیکون کارت تصویریک چشم‌انداز Unsplash تصویر محلیتصویر خام در دایرکتوری استاتیک است. تصویر محلیتصویر در دایرکتوری assets می‌باشد و پردازش توسط Hugo شده است. ","پارامترهای-کارت#پارامترهای کارت":" پارامتر توضیحات link نشانی اینترنتی (داخلی یا خارجی). title عنوان برای کارت. subtitle عنوان زیرنویس (از مارک‌داون پشتیبانی می‌کند).. icon نام آیکون. ","کارت-تصویر#کارت تصویر":"علاوه بر این، کارت از افزودن تصویر و پردازش از طریق این پارامترها پشتیبانی می‌کند:\nپارامتر توضیحات image نشانی اینترنتی تصویر کارت را مشخص می‌کند. method روش پردازش تصویر Hugo را تنظیم می‌کند. options گزینه‌های پردازش تصویر Hugo را پیکربندی می‌کند. کارت از سه نوع تصویر پشتیبانی می‌کند:\nتصویر از راه دور: نشانی اینترنتی کامل در پارامتر image. تصویر استاتیک: از مسیر نسبی در دایرکتوری static/ Hugo استفاده کنید. تصویر پردازش شده: از مسیر نسبی در دایرکتوری assets/ Hugo استفاده کنید. هگزترا در صورت نیاز به پردازش تصویر در حین ساخت، به طور خودکار تشخیص می‌دهد و پارامتر options یا تنظیمات پیش‌فرض را اعمال می‌کند (تغییر اندازه، 800x، کیفیت 80، فرمت WebP). در حال حاضر این method را پشتیبانی می‌کند: Resize، Fit، Fill و Crop.\nبرای اطلاعات بیشتر در مورد دستورات، روش‌ها و گزینه‌های پردازش تصویر داخلی Hugo به مستندات پردازش تصویر آن‌ها مراجعه کنید."},"title":"کارت‌ها"},"/docs/guide/shortcodes/cards.ja/":{"data":{"":"","カードパラメータ#カードパラメータ":" パラメータ 説明 link URL（内部または外部）。 title カードのタイトル見出し。 subtitle サブタイトル見出し（Markdown対応）。 icon アイコンの名前。 tag タグ内のテキスト。 tagColor タグの色: gray（デフォルト）、yellow、red、blue。 ","タグ#タグ":"カードはタグの追加をサポートしており、追加のステータス情報を表示するのに役立ちます。\nデフォルトタグ付きカード タグテキスト エラータグ付きカード タグテキスト 情報タグ付きカード タグテキスト 警告タグ付きカード タグテキスト 画像カードインターネット画像 タグテキスト {{\u003c cards \u003e}} {{\u003c card link=\"../callout\" title=\"デフォルトタグ色付きカード\" tag=\"タグテキスト\" \u003e}} {{\u003c card link=\"../callout\" title=\"デフォルト赤タグ付きカード\" tag=\"タグテキスト\" tagType=\"error\" \u003e}} {{\u003c card link=\"../callout\" title=\"青タグ付きカード\" tag=\"タグテキスト\" tagType=\"info\" \u003e}} {{\u003c card link=\"../callout\" title=\"黄色タグ付きカード\" tag=\"タグテキスト\" tagType=\"warning\" \u003e}} {{\u003c /cards \u003e}} ","使用方法#使用方法":" {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"コールアウト\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"../callout\" title=\"タグ付きカード\" icon=\"tag\" tag= \"カスタムタグ\" */\u003e}} {{\u003c/* card link=\"/\" title=\"アイコンなし\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"画像カード\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplashの風景画像\" */\u003e}} {{\u003c/* card link=\"/\" title=\"ローカル画像\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"staticディレクトリ下の未加工画像。\" */\u003e}} {{\u003c/* card link=\"/\" title=\"ローカル画像\" image=\"images/space.jpg\" subtitle=\"assetsディレクトリ下の画像、Hugoで処理済み。\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} ","例#例":" コールアウト タグ付きカード カスタムタグ アイコンなし 画像カードインターネット画像 ローカル画像staticディレクトリ下の未加工画像。 ローカル画像assetsディレクトリ下の画像、Hugoで処理済み。 ","列#列":"cardsショートコードにcolsパラメータを渡すことで、カードが広がる最大列数を指定できます。ただし、小さい画面では列は折りたたまれます。\n上部カード 下部カード 左カード 右カード {{\u003c cards cols=\"1\" \u003e}} {{\u003c card link=\"/\" title=\"上部カード\" \u003e}} {{\u003c card link=\"/\" title=\"下部カード\" \u003e}} {{\u003c /cards \u003e}} {{\u003c cards cols=\"2\" \u003e}} {{\u003c card link=\"/\" title=\"左カード\" \u003e}} {{\u003c card link=\"/\" title=\"右カード\" \u003e}} {{\u003c /cards \u003e}} ","画像カード#画像カード":"さらに、カードは画像の追加と以下のパラメータを通じた処理をサポートします:\nパラメータ 説明 image カードの画像URLを指定します。 method Hugoの画像処理メソッドを設定します。 options Hugoの画像処理オプションを設定します。 カードは3種類の画像をサポートします:\nリモート画像: imageパラメータに完全なURLを指定。 静的画像: Hugoのstatic/ディレクトリ内の相対パスを使用。 処理済み画像: Hugoのassets/ディレクトリ内の相対パスを使用。 Hextraはビルド時に画像処理が必要かどうかを自動検出し、optionsパラメータまたはデフォルト設定（Resize、800x、品質80、WebPフォーマット）を適用します。 現在サポートされているmethodはResize、Fit、Fill、Cropです。\nHugoの組み込み画像処理コマンド、メソッド、オプションの詳細については、画像処理ドキュメントを参照してください。"},"title":"カード"},"/docs/guide/shortcodes/cards.zh-cn/":{"data":{"":"","列数#列数":"您可以通过将 cols 参数传递给 cards 短代码来指定卡片的最大列数。请注意，在较小的屏幕上，列仍会折叠。\n顶部卡片 底部卡片 左侧卡片 右侧卡片 {{\u003c cards cols=\"1\" \u003e}} {{\u003c card link=\"/\" title=\"顶部卡片\" \u003e}} {{\u003c card link=\"/\" title=\"底部卡片\" \u003e}} {{\u003c /cards \u003e}} {{\u003c cards cols=\"2\" \u003e}} {{\u003c card link=\"/\" title=\"左侧卡片\" \u003e}} {{\u003c card link=\"/\" title=\"右侧卡片\" \u003e}} {{\u003c /cards \u003e}} ","卡片参数#卡片参数":" 参数 描述 link URL（内部或外部）。 title 卡片的标题。 subtitle 卡片的副标题（支持 Markdown）。 icon 图标的名称。 tag 标签中的文本。 tagColor 标签的颜色：gray（默认）、yellow、red 和 blue。 ","图片卡片#图片卡片":"此外，卡片支持通过以下参数添加图片并进行处理：\n参数 描述 image 指定卡片的图片 URL。 method 设置 Hugo 的图片处理方法。 options 配置 Hugo 的图片处理选项。 卡片支持三种类型的图片：\n远程图片：image 参数中的完整 URL。 静态图片：使用 Hugo static/ 目录中的相对路径。 处理后的图片：使用 Hugo assets/ 目录中的相对路径。 Hextra 在构建时自动检测是否需要图片处理，并应用 options 参数或默认设置（Resize，800x，质量 80，WebP 格式）。 目前支持以下 method：Resize、Fit、Fill 和 Crop。\n有关 Hugo 内置图片处理命令、方法和选项的更多信息，请参阅其图片处理文档。","标签#标签":"卡片支持添加标签，这对于显示额外的状态信息非常有用。\n带默认标签的卡片 标签文本 带错误标签的卡片 标签文本 带信息标签的卡片 标签文本 带警告标签的卡片 标签文本 图片卡片网络图片 标签文本 {{\u003c cards \u003e}} {{\u003c card link=\"../callout\" title=\"带默认标签颜色的卡片\" tag=\"标签文本\" \u003e}} {{\u003c card link=\"../callout\" title=\"带红色标签的卡片\" tag=\"标签文本\" tagType=\"error\" \u003e}} {{\u003c card link=\"../callout\" title=\"带蓝色标签的卡片\" tag=\"标签文本\" tagType=\"info\" \u003e}} {{\u003c card link=\"../callout\" title=\"带黄色标签的卡片\" tag=\"标签文本\" tagType=\"warning\" \u003e}} {{\u003c /cards \u003e}} ","用法#用法":" {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"提示框\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"../callout\" title=\"带标签的卡片\" icon=\"tag\" tag= \"自定义标签\" */\u003e}} {{\u003c/* card link=\"/\" title=\"无图标\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"图片卡片\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash 风景\" */\u003e}} {{\u003c/* card link=\"/\" title=\"本地图片\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"静态目录下的原始图片。\" */\u003e}} {{\u003c/* card link=\"/\" title=\"本地图片\" image=\"images/space.jpg\" subtitle=\"资源目录下的图片，由 Hugo 处理。\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} ","示例#示例":" 提示框 带标签的卡片 自定义标签 无图标 图片卡片网络图片 本地图片静态目录下的原始图片。 本地图片资源目录下的图片，由 Hugo 处理。 "},"title":"卡片"},"/docs/guide/shortcodes/cards/":{"data":{"":"","card-parameters#Card Parameters":" Parameter Description link URL (internal or external). title Title heading for the card. subtitle Subtitle heading (supports Markdown). icon Name of the icon. tag Text in tag. tagColor Color of the tag: gray (default), yellow, red and blue. ","columns#Columns":"You can specify the maximum number of columns for cards to span by passing the cols parameter to the cards shortcode. Note that columns will still be collapsed on smaller screens.\nTop Card Bottom Card Left Card Right Card {{\u003c cards cols=\"1\" \u003e}} {{\u003c card link=\"/\" title=\"Top Card\" \u003e}} {{\u003c card link=\"/\" title=\"Bottom Card\" \u003e}} {{\u003c /cards \u003e}} {{\u003c cards cols=\"2\" \u003e}} {{\u003c card link=\"/\" title=\"Left Card\" \u003e}} {{\u003c card link=\"/\" title=\"Right Card\" \u003e}} {{\u003c /cards \u003e}} ","example#Example":" Callout Card with tag custom tag No Icon Image CardInternet Image Local ImageRaw image under static directory. Local ImageImage under assets directory, processed by Hugo. ","image-card#Image Card":"Additionally, the card supports adding image and processing through these parameters:\nParameter Description image Specifies the image URL for the card. method Sets Hugo’s image processing method. options Configures Hugo’s image processing options. Card supports three kinds of images:\nRemote image: the full URL in the image parameter. Static image: use the relative path in Hugo’s static/ directory. Processed image: use the relative path in Hugo’s assets/ directory. Hextra auto-detects if image processing is needed during build and applies the options parameter or default settings (Resize, 800x, Quality 80, WebP Format). It currently supports these method: Resize, Fit, Fill and Crop.\nFor more on Hugo’s built in image processing commands, methods, and options see their Image Processing Documentation.","tags#Tags":"Card supports adding tags which could be useful to show extra status information.\nCard with default tag tag text Card with error tag tag text Card with info tag tag text Card with warning tag tag text Image CardInternet Image tag text {{\u003c cards \u003e}} {{\u003c card link=\"../callout\" title=\"Card with default tag color\" tag=\"tag text\" \u003e}} {{\u003c card link=\"../callout\" title=\"Card with default red tag\" tag=\"tag text\" tagType=\"error\" \u003e}} {{\u003c card link=\"../callout\" title=\"Card with blue tag\" tag=\"tag text\" tagType=\"info\" \u003e}} {{\u003c card link=\"../callout\" title=\"Card with yellow tag\" tag=\"tag text\" tagType=\"warning\" \u003e}} {{\u003c /cards \u003e}} ","usage#Usage":" {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"Callout\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"../callout\" title=\"Card with tag\" icon=\"tag\" tag= \"A custom tag\" */\u003e}} {{\u003c/* card link=\"/\" title=\"No Icon\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} "},"title":"Cards"},"/docs/guide/shortcodes/details.fa/":{"data":{"":"یک کامپوننت داخلی برای نمایش محتوای قابل باز و بسته شدن.","استفاده#استفاده":" {{%/* details title=\"جزئیات\" */%}} این محتوای جزئیات است. مارک‌داون **پشتیبانی می‌شود**. {{%/* /details */%}} {{%/* details title=\"برای نمایش روی من کلیک کنید\"closed=\"true\" */%}} این به طور پیش‌فرض پنهان می‌شود. {{%/* /details */%}} ","مثال#مثال":" جزئیات این محتوای جزئیات است.\nمارک‌داون پشتیبانی می‌شود.\nبرای نمایش روی من کلیک کنید این به طور پیش‌فرض پنهان می‌شود. "},"title":"جزئیات"},"/docs/guide/shortcodes/details.ja/":{"data":{"":"折りたたみ可能なコンテンツを表示するための組み込みコンポーネント。","使い方#使い方":" {{%/* details title=\"詳細\" */%}} これは詳細のコンテンツです。 Markdownは**サポートされています**。 {{%/* /details */%}} {{%/* details title=\"クリックして表示\" closed=\"true\" */%}} これはデフォルトで非表示になります。 {{%/* /details */%}} ","例#例":" 詳細 これは詳細のコンテンツです。\nMarkdownはサポートされています。\nクリックして表示 これはデフォルトで非表示になります。 "},"title":"詳細"},"/docs/guide/shortcodes/details.zh-cn/":{"data":{"":"一个内置组件，用于显示可折叠的内容。","用法#用法":" {{%/* details title=\"详情\" */%}} 这是详情的内容。 支持 **Markdown**。 {{%/* /details */%}} {{%/* details title=\"点击我展开\" closed=\"true\" */%}} 默认情况下，这部分内容会被隐藏。 {{%/* /details */%}} ","示例#示例":" 详情 这是详情的内容。\n支持 Markdown。\n点击我展开 默认情况下，这部分内容会被隐藏。 "},"title":"详情"},"/docs/guide/shortcodes/details/":{"data":{"":"A built-in component to display a collapsible content.","example#Example":" Details This is the content of the details.\nMarkdown is supported.\nClick me to reveal This will be hidden by default. ","usage#Usage":" {{%/* details title=\"Details\" */%}} This is the content of the details. Markdown is **supported**. {{%/* /details */%}} {{%/* details title=\"Click me to reveal\" closed=\"true\" */%}} This will be hidden by default. {{%/* /details */%}} "},"title":"Details"},"/docs/guide/shortcodes/filetree.fa/":{"data":{"":"","استفاده#استفاده":" Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fa.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} ","مثال#مثال":" content _index.md docs _index.md introduction.md introduction.fa.md hugo.toml "},"title":"FileTree"},"/docs/guide/shortcodes/filetree.ja/":{"data":{"":"","使用方法#使用方法":" Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} ","例#例":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml "},"title":"FileTree"},"/docs/guide/shortcodes/filetree.zh-cn/":{"data":{"":"","用法#用法":" Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} ","示例#示例":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml "},"title":"文件树"},"/docs/guide/shortcodes/filetree/":{"data":{"":"","example#Example":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml ","usage#Usage":" Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} "},"title":"FileTree"},"/docs/guide/shortcodes/icon.fa/":{"data":{"":"برای استفاده از این کد کوتاه درون‌خطی، باید آن را در پیکربندی فعال کنید:\nhugo.yamlenableInlineShortcodes: true فهرست آیکون‌های موجود را می‌توانید در data/icons.yaml پیدا کنید.","استفاده#استفاده":" {{\u003c/* icon \"github\" */\u003e}} آیکون‌های با طرح‌های متفاوت در Heroicons نسخه ۱ خارج از جعبه در دسترس هستند.\nچجوری آیکون‌های خودمان را اضافه کنیم پرونده data/icons.yaml را ایجاد کنید، سپس آیکون‌های SVG خود را در فرمت زیر اضافه کنید:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e سپس می‌توان آن را در کد کوتاه مانند زیر استفاده کرد:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} نکته: Iconify Design مکانی عالی برای پیدا کردن آیکون‌های SVG برای سایت شما است.","مثال#مثال":" "},"title":"آیکون"},"/docs/guide/shortcodes/icon.ja/":{"data":{"":"このショートコードをインラインで使用するには、設定でインラインショートコードを有効にする必要があります:\nhugo.yamlenableInlineShortcodes: true 利用可能なアイコンのリストは、data/icons.yaml で確認できます。","使用方法#使用方法":" {{\u003c/* icon \"github\" */\u003e}} Heroicons v1 のアウトラインアイコンがデフォルトで利用可能です。\n独自のアイコンを追加する方法 data/icons.yaml ファイルを作成し、以下の形式で独自のSVGアイコンを追加します:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e その後、ショートコードで以下のように使用できます:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} ヒント: Iconify Design は、サイト用のSVGアイコンを見つけるのに最適な場所です。","例#例":" "},"title":"アイコン"},"/docs/guide/shortcodes/icon.zh-cn/":{"data":{"":"要在行内使用此短代码，需要在配置中启用行内短代码：\nhugo.yamlenableInlineShortcodes: true 可用图标的列表可以在 data/icons.yaml 中找到。","用法#用法":" {{\u003c/* icon \"github\" */\u003e}} Heroicons v1 的轮廓图标默认可用。\n如何添加自定义图标 创建 data/icons.yaml 文件，然后按照以下格式添加自定义的 SVG 图标：\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e 然后可以在短代码中这样使用：\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} 提示：Iconify Design 是寻找网站 SVG 图标的好地方。","示例#示例":" "},"title":"图标"},"/docs/guide/shortcodes/icon/":{"data":{"":"To use this shortcode inline, inline shortcode needs to be enabled in the config:\nhugo.yamlenableInlineShortcodes: true List of available icons can be found in data/icons.yaml.","example#Example":" ","usage#Usage":" {{\u003c/* icon \"github\" */\u003e}} Heroicons v1 outline icons are available out of the box.\nHow to add your own icons Create data/icons.yaml file, then add your own SVG icons in the following format:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e It then can be used in the shortcode like this:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} Tip: Iconify Design is a great place to find SVG icons for your site."},"title":"Icon"},"/docs/guide/shortcodes/jupyter.ja/":{"data":{"":" Jupyter Notebook をショートコード経由で含める実験的な機能です。すべてのセルタイプがサポートされているわけではありません。 Jupyter Notebook は、Project Jupyter の言語に依存しない HTML ノートブックアプリケーションです。これを使用すると、ライブコード、数式、視覚化、および説明文を含むドキュメントを作成して共有できます。","ノートブックの例#ノートブックの例":" ℹ️ 以下は、プロジェクトの assets フォルダに含まれているノートブックファイルの例です。 ","使用方法#使用方法":"ローカルノートブックを使用する Jupyter Notebook ショートコードを使用するには、プロジェクト内に Jupyter Notebook ファイルが必要です。画像を追加する方法と同様に、Jupyter Notebook を assets フォルダに追加できます。\nassets notebook.ipynb content docs my-page.md jupyter ショートコードを使用してページに Jupyter Notebook を含めます：\ncontent/docs/my-page.md--- title: My Page math: true --- {{% jupyter \"notebook.ipynb\" %}} あるいは、Hugo の [ページバンドル][page-bundles] 機能を利用して、Jupyter Notebook を Markdown ファイルと一緒に整理することもできます。\ncontent docs my-page index.md notebook.ipynb content/docs/my-page/index.md--- title: My Page math: true --- {{% jupyter \"notebook.ipynb\" %}} リモートノートブックを使用する ノートブックファイルの URL を指定して、リモートノートブックを使用することもできます。たとえば、What is the Jupyter Notebook ノートブックをページに含めるには、次のショートコードを使用します：\n{{% jupyter \"https://raw.githubusercontent.com/jupyter/notebook/main/docs/source/examples/Notebook/What%20is%20the%20Jupyter%20Notebook.ipynb\" %}} "},"title":"Jupyter Notebook"},"/docs/guide/shortcodes/jupyter.zh-cn/":{"data":{"":" 实验性功能：通过短代码嵌入 Jupyter Notebook。请注意，并非所有单元格类型都受支持。 Jupyter Notebook 是 Project Jupyter 的一个语言无关的 HTML 笔记本应用程序。它允许你创建和共享包含实时代码、方程、可视化和叙述性文本的文档。","使用方法#使用方法":"使用本地笔记本 要使用 Jupyter Notebook 短代码，你需要在项目中有一个 Jupyter Notebook 文件。类似于如何添加图片到项目中，你可以将 Jupyter Notebooks 添加到 assets 文件夹。\nassets notebook.ipynb content docs my-page.md 使用 jupyter 短代码将 Jupyter Notebook 包含在页面中：\ncontent/docs/my-page.md--- title: 我的页面 math: true --- {{% jupyter \"notebook.ipynb\" %}} 或者，你可以利用 Hugo 的[页面包][page-bundles]功能将 Jupyter Notebooks 与 Markdown 文件一起组织。\ncontent docs my-page index.md notebook.ipynb content/docs/my-page/index.md--- title: 我的页面 math: true --- {{% jupyter \"notebook.ipynb\" %}} 使用远程笔记本 你也可以通过提供笔记本文件的 URL 来使用远程笔记本。例如，要在页面中包含 What is the Jupyter Notebook 笔记本，你可以使用以下短代码：\n{{% jupyter \"https://raw.githubusercontent.com/jupyter/notebook/main/docs/source/examples/Notebook/What%20is%20the%20Jupyter%20Notebook.ipynb\" %}} ","示例笔记本#示例笔记本":" ℹ️ 以下是包含在项目 assets 文件夹中的笔记本文件示例。 "},"title":"Jupyter Notebook"},"/docs/guide/shortcodes/jupyter/":{"data":{"":" Experimental feature to include Jupyter Notebooks via a shortcode. Note that not all cell types are supported. Jupyter Notebook is a language-agnostic HTML notebook application for Project Jupyter. It allows you to create and share documents that contain live code, equations, visualizations, and narrative text.","example-notebook#Example Notebook":" ℹ️ The following is an example of a notebook file that is included in the project assets folder. ","how-to-use#How to use":"Using a local notebook To use the Jupyter Notebook shortcode, you need to have a Jupyter Notebook file in your project. Similar to how you would add images to the project, you can add Jupyter Notebooks to the assets folder.\nassets notebook.ipynb content docs my-page.md Include the Jupyter Notebook in the page using the jupyter shortcode:\ncontent/docs/my-page.md--- title: My Page math: true --- {{% jupyter \"notebook.ipynb\" %}} Alternatively, you can utilize the [page bundles][page-bundles] feature of Hugo to organize the Jupyter Notebooks together with the Markdown file.\ncontent docs my-page index.md notebook.ipynb content/docs/my-page/index.md--- title: My Page math: true --- {{% jupyter \"notebook.ipynb\" %}} Using a remote notebook You can also use a remote notebook by providing the URL to the notebook file. For example, to include What is the Jupyter Notebook notebook in the page, you can use the following shortcode:\n{{% jupyter \"https://raw.githubusercontent.com/jupyter/notebook/main/docs/source/examples/Notebook/What%20is%20the%20Jupyter%20Notebook.ipynb\" %}} "},"title":"Jupyter Notebook"},"/docs/guide/shortcodes/others.ja/":{"data":{"":" ℹ️ これらの一部はHugoの組み込みショートコードです。 これらのショートコードは安定性が低く、いつでも変更される可能性があります。 ","pdf#PDF":"PDFショートコードを使用すると、コンテンツ内にPDFファイルを埋め込むことができます。\n{{\u003c pdf \"https://example.com/sample.pdf\" \u003e}} また、プロジェクトディレクトリ内にPDFファイルを配置し、相対パスを使用することもできます。\n{{\u003c pdf \"path/to/file.pdf\" \u003e}} 例:","youtube#YouTube":"YouTube動画を埋め込みます。\n{{\u003c youtube VIDEO_ID \u003e}} 結果:\n詳細については、HugoのYouTubeショートコードを参照してください。","バッジ#バッジ":" {{\u003c badge \"バッジ\" \u003e}} 結果:\nバッジ バリエーション:\n{{\u003c badge content=\"info\" type=\"info\" \u003e}} {{\u003c badge content=\"warning\" type=\"warning\" \u003e}} {{\u003c badge content=\"error\" type=\"error\" \u003e}} 結果:\ninfo warning error リンクとアイコン付き:\n{{\u003c badge content=\"リリース\" link=\"https://github.com/imfing/hextra/releases\" icon=\"github\" \u003e}} 結果:\nリリース "},"title":"その他"},"/docs/guide/shortcodes/others.zh-cn/":{"data":{"":" ℹ️ 其中一些是 Hugo 内置的短代码。 这些短代码被认为不太稳定，可能会随时更改。 ","pdf#PDF":"使用 PDF 短代码，您可以在内容中嵌入 PDF 文件。\n{{\u003c pdf \"https://example.com/sample.pdf\" \u003e}} 您也可以将 PDF 文件放在项目目录中并使用相对路径。\n{{\u003c pdf \"path/to/file.pdf\" \u003e}} 示例：","youtube#YouTube":"嵌入 YouTube 视频。\n{{\u003c youtube 视频ID \u003e}} 结果：\n更多信息，请参阅 Hugo 的 YouTube 短代码。","徽章#徽章":" {{\u003c badge \"徽章\" \u003e}} 结果：\n徽章 变体：\n{{\u003c badge content=\"信息\" type=\"info\" \u003e}} {{\u003c badge content=\"警告\" type=\"warning\" \u003e}} {{\u003c badge content=\"错误\" type=\"error\" \u003e}} 结果：\n信息 警告 错误 带链接和图标：\n{{\u003c badge content=\"发布\" link=\"https://github.com/imfing/hextra/releases\" icon=\"github\" \u003e}} 结果：\n发布 "},"title":"其他"},"/docs/guide/shortcodes/others/":{"data":{"":" ℹ️ Some of these are Hugo built-in shortcodes. These shortcodes are considered less stable and may be changed anytime. ","badge#Badge":" {{\u003c badge \"Badge\" \u003e}} Result:\nBadge Variants:\n{{\u003c badge content=\"info\" type=\"info\" \u003e}} {{\u003c badge content=\"warning\" type=\"warning\" \u003e}} {{\u003c badge content=\"error\" type=\"error\" \u003e}} Result:\ninfo warning error With link and icon:\n{{\u003c badge content=\"Releases\" link=\"https://github.com/imfing/hextra/releases\" icon=\"github\" \u003e}} Result:\nReleases ","pdf#PDF":"With PDF shortcode, you can embed a PDF file in your content.\n{{\u003c pdf \"https://example.com/sample.pdf\" \u003e}} You can also place the PDF file in your project directory and use the relative path.\n{{\u003c pdf \"path/to/file.pdf\" \u003e}} Example:","youtube#YouTube":"Embed a YouTube video.\n{{\u003c youtube VIDEO_ID \u003e}} Result:\nFor more information, see Hugo’s YouTube Shortcode."},"title":"Others"},"/docs/guide/shortcodes/steps.fa/":{"data":{"":"یک کامپوننت داخلی برای نمایش یک سری مراحل.","استفاده#استفاده":"سرتیتر مارک‌داون h3 را در کد کوتاه steps قرار دهید.\n{{%/* steps */%}} ### مرحله ۱ این اولین مرحله است. ### مرحله ۲ این دومین مرحله است. {{%/* /steps */%}} ","مثال#مثال":" مرحله ۱ این اولین مرحله است.\nمرحله ۲ این دومین مرحله است.\nمرحله ۳ این سومین مرحله است."},"title":"مراحل"},"/docs/guide/shortcodes/steps.ja/":{"data":{"":"ステップのシリーズを表示するための組み込みコンポーネント。","使い方#使い方":" ℹ️ このショートコードはMarkdownコンテンツ専用であることに注意してください。 HTMLコンテンツや他のショートコードをステップの内容として使用すると、期待通りにレンダリングされない場合があります。 steps ショートコード内にMarkdownのh3ヘッダーを配置します。\n{{% steps %}} ### ステップ 1 これは最初のステップです。 ### ステップ 2 これは2番目のステップです。 {{% /steps %}} ","例#例":" ステップ 1 これは最初のステップです。\nステップ 2 これは2番目のステップです。\nステップ 3 これは3番目のステップです。"},"title":"ステップ"},"/docs/guide/shortcodes/steps.zh-cn/":{"data":{"":"一个内置组件，用于显示一系列步骤。","用法#用法":" ℹ️ 请注意，此短代码仅适用于 Markdown 内容。 如果将 HTML 内容或其他短代码作为步骤内容，可能无法按预期渲染。 在 steps 短代码中放置 Markdown 的 h3 标题。\n{{% steps %}} ### 第一步 这是第一步。 ### 第二步 这是第二步。 {{% /steps %}} ","示例#示例":" 第一步 这是第一步。\n第二步 这是第二步。\n第三步 这是第三步。"},"title":"步骤"},"/docs/guide/shortcodes/steps/":{"data":{"":"A built-in component to display a series of steps.","example#Example":" Step 1 This is the first step.\nStep 2 This is the second step.\nStep 3 This is the third step.","usage#Usage":" ℹ️ Please note that this shortcode is intended only for Markdown content. If you put HTML content or other shortcodes as step content, it may not render as expected. Put Markdown h3 header within steps shortcode.\n{{% steps %}} ### Step 1 This is the first step. ### Step 2 This is the second step. {{% /steps %}} "},"title":"Steps"},"/docs/guide/shortcodes/tabs.fa/":{"data":{"":"","استفاده#استفاده":"پیش‌فرض {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: جیسون معادل اختصاری عبارت JavaScript Object Notation به معنی «نمادگذاری اشیا در جاوا اسکریپت» است. جیسون یک قالب استاندارد باز است که امکان تبادل داده‌ها در وب با استفاده از جفت‌های خصوصیت-کلید را ممکن ساخته است.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: یک زبان برای سریال‌سازی داده قابل-خواندن-برای-انسان است.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: یک قالب پرونده پیکربندی که به هدف سادگی در خوانایی به کمک داشتن معانی مشخص با هدف «کمینه» و مینیمال بودن ارائه شده است.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} مشخص کردن زبانه‌ پیش‌فرض از ویژگی defaultIndex برای مشخص کردن زبانه‌ پیش‌فرض استفاده کنید. این شاخص از 0 شروع می‌شود.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: جیسون معادل اختصاری عبارت JavaScript Object Notation به معنی «نمادگذاری اشیا در جاوا اسکریپت» است. جیسون یک قالب استاندارد باز است که امکان تبادل داده‌ها در وب با استفاده از جفت‌های خصوصیت-کلید را ممکن ساخته است.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: یک زبان برای سریال‌سازی داده قابل-خواندن-برای-انسان است.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: یک قالب پرونده پیکربندی که به هدف سادگی در خوانایی به کمک داشتن معانی مشخص با هدف «کمینه» و مینیمال بودن ارائه شده است.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} زبانه‌ YAML به طور پیش‌فرض انتخاب می‌شود.\nJSONYAMLTOML JSON: جیسون معادل اختصاری عبارت JavaScript Object Notation به معنی «نمادگذاری اشیا در جاوا اسکریپت» است. جیسون یک قالب استاندارد باز است که امکان تبادل داده‌ها در وب با استفاده از جفت‌های خصوصیت-کلید را ممکن ساخته است. YAML: یک زبان برای سریال‌سازی داده قابل-خواندن-برای-انسان است. TOML: یک قالب پرونده پیکربندی که به هدف سادگی در خوانایی به کمک داشتن معانی مشخص با هدف «کمینه» و مینیمال بودن ارائه شده است. استفاده از مارک‌داون سینتکس مارک‌داون از جمله بلوک کد نیز پشتیبانی می‌شود:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"سلام\": \"دنیا\" } ``` {{\u003c /tab \u003e}} ... زبانه‌های دیگر را به همین ترتیب اضافه کنید {{\u003c /tabs \u003e}} JSONYAMLTOML { \"سلام\": \"دنیا\" } سلام: دنیا سلام = \"دنیا\" ","مثال#مثال":" JSONYAMLTOML JSON: جیسون معادل اختصاری عبارت JavaScript Object Notation به معنی «نمادگذاری اشیا در جاوا اسکریپت» است. جیسون یک قالب استاندارد باز است که امکان تبادل داده‌ها در وب با استفاده از جفت‌های خصوصیت-کلید را ممکن ساخته است. YAML: یک زبان برای سریال‌سازی داده قابل-خواندن-برای-انسان است. TOML: یک قالب پرونده پیکربندی که به هدف سادگی در خوانایی به کمک داشتن معانی مشخص با هدف «کمینه» و مینیمال بودن ارائه شده است. "},"title":"زبانه‌ها"},"/docs/guide/shortcodes/tabs.ja/":{"data":{"":"","使用方法#使用方法":"デフォルト {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) は、JavaScript オブジェクト構文に基づいた構造化データを表現するための標準的なテキストベースのフォーマットです。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML は人間が読みやすいデータシリアライゼーション言語です。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML は、明らかなセマンティクスにより読みやすい最小限の設定ファイルフォーマットを目指しています。{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} 選択されたインデックスを指定 defaultIndex プロパティを使用して、選択されるタブを指定します。インデックスは 0 から始まります。\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) は、JavaScript オブジェクト構文に基づいた構造化データを表現するための標準的なテキストベースのフォーマットです。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML は人間が読みやすいデータシリアライゼーション言語です。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML は、明らかなセマンティクスにより読みやすい最小限の設定ファイルフォーマットを目指しています。{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} YAML タブがデフォルトで選択されます。\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) は、JavaScript オブジェクト構文に基づいた構造化データを表現するための標準的なテキストベースのフォーマットです。 YAML: YAML は人間が読みやすいデータシリアライゼーション言語です。 TOML: TOML は、明らかなセマンティクスにより読みやすい最小限の設定ファイルフォーマットを目指しています。 Markdown を使用 コードブロックを含む Markdown 構文もサポートされています:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... 他のタブも同様に追加 {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" ","例#例":" JSONYAMLTOML JSON: JavaScript Object Notation (JSON) は、JavaScript オブジェクト構文に基づいた構造化データを表現するための標準的なテキストベースのフォーマットです。 YAML: YAML は人間が読みやすいデータシリアライゼーション言語です。 TOML: TOML は、明らかなセマンティクスにより読みやすい最小限の設定ファイルフォーマットを目指しています。 "},"title":"タブ"},"/docs/guide/shortcodes/tabs.zh-cn/":{"data":{"":"","用法#用法":"默认 {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript 对象表示法（JSON）是一种基于 JavaScript 对象语法的标准文本格式，用于表示结构化数据。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML 是一种人类可读的数据序列化语言。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML 旨在成为一种最小化的配置文件格式，由于其明显的语义，易于阅读。{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} 指定选中索引 使用 defaultIndex 属性来指定选中的标签页。索引从 0 开始。\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript 对象表示法（JSON）是一种基于 JavaScript 对象语法的标准文本格式，用于表示结构化数据。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML 是一种人类可读的数据序列化语言。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML 旨在成为一种最小化的配置文件格式，由于其明显的语义，易于阅读。{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} 默认情况下，YAML 标签页将被选中。\nJSONYAMLTOML JSON: JavaScript 对象表示法（JSON）是一种基于 JavaScript 对象语法的标准文本格式，用于表示结构化数据。 YAML: YAML 是一种人类可读的数据序列化语言。 TOML: TOML 旨在成为一种最小化的配置文件格式，由于其明显的语义，易于阅读。 使用 Markdown Markdown 语法，包括代码块，也受支持：\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... 类似地添加其他标签页 {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" ","示例#示例":" JSONYAMLTOML JSON: JavaScript 对象表示法（JSON）是一种基于 JavaScript 对象语法的标准文本格式，用于表示结构化数据。 YAML: YAML 是一种人类可读的数据序列化语言。 TOML: TOML 旨在成为一种最小化的配置文件格式，由于其明显的语义，易于阅读。 "},"title":"标签页"},"/docs/guide/shortcodes/tabs/":{"data":{"":"","example#Example":" JSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. ","usage#Usage":"Default {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} Specify Selected Index Use defaultIndex property to specify the selected tab. The index starts from 0.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} The YAML tab will be selected by default.\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. Use Markdown Markdown syntax including code block is also supported:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... add other tabs similarly {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" "},"title":"Tabs"},"/docs/guide/syntax-highlighting.fa/":{"data":{"":"هیوگو از Chroma، یک برجسته‌کننده سینتکس عمومی در Go خالص، برای برجسته‌سازی کردن سینتکس استفاده می‌کند. توصیه می‌شود از بک‌تیک برای بلوک‌های کد در محتوای مارک‌داون استفاده کنید. مثلا:\nMarkdown```python def say_hello(): print(\"سلام!\") ``` به صورت زیر رندر خواهد شد:\ndef say_hello(): print(\"سلام!\") ","زبانهای-پشتیبانی-شده#زبان‌های پشتیبانی شده":"برای مشاهده فهرست زبان‌های پشتیبانی شده، لطفا به مستندات Chroma مراجعه کنید.","ویژگیها#ویژگی‌ها":"Filename برای افزودن نام پرونده یا عنوان به بلوک کد، filename را مشخص کنید:\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"سلام!\") ``` hello.pydef say_hello(): print(\"سلام!\") شماره خطوط برای تنظیم شماره خطوط، ویژگی linenos را روی table قرار دهید و به صورت اختیاری linenostart را روی شماره‌ای که خط شروع می‌شود تنظیم کنید:\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"سلام!\") ``` 42 43 def say_hello(): print(\"سلام!\") برجسته کردن خطوط برای برجسته کردن خطوط، ویژگی hl_lines را به فهرستی از شماره خطوط تنظیم کنید:\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"سلام!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"سلام!\") def main(): say_hello() دکمه کپی به طور پیش‌فرض، دکمه کپی برای بلوک‌های کد فعال است."},"title":"برجسته‌کردن سینتکس"},"/docs/guide/syntax-highlighting.ja/":{"data":{"":"Hugoは、純粋なGoで書かれた汎用シンタックスハイライターであるChromaを使用してシンタックスハイライトを行います。 Markdownコンテンツ内のコードブロックにはバッククォートを使用することを推奨します。例えば：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` は次のようにレンダリングされます：\ndef say_hello(): print(\"Hello!\") ","サポートされている言語#サポートされている言語":"サポートされている言語のリストについては、Chromaのドキュメントを参照してください。","機能#機能":"ファイル名 コードブロックにファイル名やタイトルを追加するには、filename属性を設定します：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") ファイルへのリンク base_url属性を使用して、ファイル名と組み合わせてリンクを生成するベースURLを提供できます。\nファイル名には、ベースパス内のファイルの場所を指定する相対パスを含めることができます。\nMarkdown```go {base_url=\"https://github.com/imfing/hextra/blob/main/\",filename=\"exampleSite/hugo.work\"} go 1.20 ``` exampleSite/hugo.workgo 1.20 行番号 行番号を設定するには、linenos属性をtableに設定し、オプションでlinenostartを開始行番号に設定します：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 行のハイライト 行をハイライトするには、hl_lines属性に行番号のリストを設定します：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() コピーボタン デフォルトでは、コードブロックにコピーボタンが有効になっています。その動作はサイト設定ファイルを変更することで変更できます：\nhugo.yaml 42 43 44 45 46 47 params: highlight: copy: enable: true # hover | always display: hover "},"title":"シンタックスハイライト"},"/docs/guide/syntax-highlighting.zh-cn/":{"data":{"":"Hugo 使用 Chroma，这是一个用纯 Go 编写的通用语法高亮器，用于语法高亮。 建议在 Markdown 内容中使用反引号来标记代码块。例如：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` 将会渲染为：\ndef say_hello(): print(\"Hello!\") ","功能#功能":"文件名 要为代码块添加文件名或标题，请设置 filename 属性：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") 文件链接 你可以使用 base_url 属性提供一个基础 URL，它将与文件名结合生成一个链接。\n如果文件名指定了文件在基础路径中的位置，则可以包含相对路径。\nMarkdown```go {base_url=\"https://github.com/imfing/hextra/blob/main/\",filename=\"exampleSite/hugo.work\"} go 1.20 ``` exampleSite/hugo.workgo 1.20 行号 要设置行号，请将 linenos 属性设置为 table，并可选地设置 linenostart 为起始行号：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 高亮行 要高亮特定行，请将 hl_lines 属性设置为行号列表：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() 复制按钮 默认情况下，代码块启用了复制按钮。可以通过修改站点配置文件来更改其行为：\nhugo.yaml 42 43 44 45 46 47 params: highlight: copy: enable: true # hover | always display: hover ","支持的语言#支持的语言":"有关支持的语言列表，请参阅 Chroma 文档。"},"title":"语法高亮"},"/docs/guide/syntax-highlighting/":{"data":{"":"Hugo uses Chroma, a general purpose syntax highlighter in pure Go, for syntax highlighting. It is recommended to use backticks for code blocks in Markdown content. For example:\nMarkdown```python def say_hello(): print(\"Hello!\") ``` will be rendered as:\ndef say_hello(): print(\"Hello!\") ","features#Features":"Filename To add a filename or title to the code block, set attribute filename:\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") Link to File You can use the base_url attribute to provide a base URL that will be combined with the file name to generate a link.\nThe file name can include a relative path if it specifies the file’s location within the base path.\nMarkdown```go {base_url=\"https://github.com/imfing/hextra/blob/main/\",filename=\"exampleSite/hugo.work\"} go 1.20 ``` exampleSite/hugo.workgo 1.20 Line Numbers To set line numbers, set attribute linenos to table and optionally set linenostart to the starting line number:\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") Highlighting Lines To highlight lines, set attribute hl_lines to a list of line numbers:\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() Copy Button By default, copy button is enabled for code blocks. Its behavior can changed by modifying the site configuration file:\nhugo.yaml 42 43 44 45 46 47 params: highlight: copy: enable: true # hover | always display: hover ","supported-languages#Supported Languages":"For a list of supported languages, please see the Chroma documentation."},"title":"Syntax Highlighting"},"/showcase/":{"data":{"":" Open source projects powered by Hextra Clace Regolith Desktop Model Context Protocol Specification cellular_raza Sidekick Install C AXIVO Docs Stanford CS 40 Helix Docs Clever Cloud Documentation OWASP AI Security and Privacy Guide Osuny Porter HITSZ OpenAuto LutheranConfessions Hextra Starter Template "},"title":"Showcase"}}